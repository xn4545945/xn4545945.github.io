<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xn4545945</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xigulu.com/"/>
  <updated>2016-11-27T09:57:44.000Z</updated>
  <id>http://blog.xigulu.com/</id>
  
  <author>
    <name>xn4545945</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【微信】小程序开发尝鲜</title>
    <link href="http://blog.xigulu.com/2016/11/14/WeChat-small-app/"/>
    <id>http://blog.xigulu.com/2016/11/14/WeChat-small-app/</id>
    <published>2016-11-13T16:00:00.000Z</published>
    <updated>2016-11-27T09:57:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序最近貌似比较火, 研究一番觉得和React写法很相似, 也是封装了一系列自己的组件, 同为JS写代码, 且还定义了自己的wxss样式表等。</p>
<a id="more"></a>
<hr>
<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="external">官方文档传送门</a></p>
<h2 id="项目基本结构"><a href="#项目基本结构" class="headerlink" title="项目基本结构"></a>项目基本结构</h2><p><img src="http://7xlwuv.com1.z0.glb.clouddn.com/wx_small_app.png" alt=""><br>主项目结构如下:<br>-app.js               脚本入口文件<br>-app.json             主配置文件<br>-app.wxss             公共样式表文件(可以在page中直接使用)<br>-pages文件夹           放页面文件<br>-utils文件夹           工具方法</p>
<p>每一个小程序Page页面是由同路径下同名的四个不同后缀文件的组成，如：<br>-index.js             脚本文件(负责数据与交互)<br>-index.wxml           页面结构文件(单独用一个文件来做布局)<br>-index.wxss           样式表文件<br>-index.json           配置文件</p>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p><strong>var app = getApp()</strong>全局函数, 获取小程序应用实例。<br>如果需要全局的数据可以在app.js的 App() 中设置, 如:<br><strong>注意</strong>: 全局变量修改之后是会保持的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line">App(&#123;</div><div class="line">  globalData: <span class="number">1</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="comment">// The localValue can only be used in file a.js.</span></div><div class="line"><span class="keyword">var</span> localValue = <span class="string">'a'</span></div><div class="line"><span class="comment">// Get the app instance.</span></div><div class="line"><span class="keyword">var</span> app = getApp()</div><div class="line"><span class="comment">// Get the global data and change it.</span></div><div class="line">app.globalData++</div></pre></td></tr></table></figure>
<p>我们可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 module.exports 或者 exports 才能对外暴露接口。</p>
<p><strong>注意</strong>：<br>-exports 是 module.exports 的一个引用，因此在模块里边随意更改 exports 的指向会造成未知的错误。推荐采用 module.exports 来暴露模块接口。<br>-小程序目前不支持直接引入 node_modules , 需要用到 node_modules 时建议拷贝相关的代码到小程序的目录中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// common.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span> !`</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayGoodbye</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Goodbye <span class="subst">$&#123;name&#125;</span> !`</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.sayHello = sayHello</div><div class="line">exports.sayGoodbye = sayGoodbye</div></pre></td></tr></table></figure></p>
<p>在需要使用这些模块的文件中，使用require将代码引入:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> common = <span class="built_in">require</span>(<span class="string">'common.js'</span>)</div><div class="line">Page(&#123;</div><div class="line">  helloMINA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    common.sayHello(<span class="string">'MINA'</span>)</div><div class="line">  &#125;,</div><div class="line">  goodbyeMINA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    common.sayGoodbye(<span class="string">'MINA'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="页面Page"><a href="#页面Page" class="headerlink" title="页面Page"></a>页面Page</h2><p>Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="comment">//获取应用实例</span></div><div class="line"><span class="keyword">var</span> app = getApp()</div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    motto: <span class="string">'Hello World'</span>,</div><div class="line">    userInfo: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//事件处理函数</span></div><div class="line">  bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    wx.navigateTo(&#123;</div><div class="line">      url: <span class="string">'../logs/logs'</span></div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'onLoad'</span>)</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">    <span class="comment">//调用应用实例的方法获取全局数据</span></div><div class="line">    app.getUserInfo(<span class="function"><span class="keyword">function</span>(<span class="params">userInfo</span>)</span>&#123;</div><div class="line">      <span class="comment">//更新数据</span></div><div class="line">      that.setData(&#123;</div><div class="line">        userInfo:userInfo</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p>主要是以下几个方法(与React中的很类似):<br>-onLoad        加载<br>-onReady       加载好后<br>-onShow        显示<br>-onHide        隐藏<br>-onUnload      卸载资源</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    text: <span class="string">"This is page data."</span></div><div class="line">  &#125;,</div><div class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do some initialize when page load.</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"onLoad"</span>)</div><div class="line">  &#125;,</div><div class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something when page ready.</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"onReady"</span>)</div><div class="line">  &#125;,</div><div class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something when page show.</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"onShow"</span>)</div><div class="line">  &#125;,</div><div class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something when page hide.</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"onHide"</span>)</div><div class="line">  &#125;,</div><div class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something when page close.</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"onUnload"</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//以下为自带的几个事件</span></div><div class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something when pull down.</span></div><div class="line">  &#125;,</div><div class="line">  onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something when page reach bottom.</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// Event handler.</span></div><div class="line">  viewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      text: <span class="string">'Set some data for updating view.'</span></div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  customData: &#123;</div><div class="line">    hi: <span class="string">'MINA'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="页面数据绑定"><a href="#页面数据绑定" class="headerlink" title="页面数据绑定"></a>页面数据绑定</h3><p>数据绑定使用双大括号将变量包起来.<br>在.wxml文件中:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;view&gt; &#123;&#123; message &#125;&#125; &lt;<span class="regexp">/view&gt;</span></div></pre></td></tr></table></figure></p>
<p>在.js文件中:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    message: <span class="string">'Hello MINA!'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">### 事件</div><div class="line">[事件文档传送门](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html)</div><div class="line">如bindtap，当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数。</div><div class="line">在.wxml文件中:</div><div class="line">`<span class="string">``</span>javascript</div><div class="line">&lt;view id=<span class="string">"tapTest"</span> data-hi=<span class="string">"WeChat"</span> bindtap=<span class="string">"tapName"</span>&gt; Click me! &lt;/view&gt;</div></pre></td></tr></table></figure></p>
<p>在.js文件中:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  tapName: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>wxml文件是可以引用其他wxml文件的.<br>WXML 提供两种文件引用方式import和include。<br><strong>import</strong>:有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template。<br><strong>include</strong>:可以将目标文件除了<template>的整个代码引入，相当于是拷贝到include位置.</template></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- item.wxml --&gt;</div><div class="line">&lt;template name="item"&gt;</div><div class="line">  &lt;text&gt;&#123;&#123;text&#125;&#125;&lt;/text&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>在index.wxml中引用item.wxml<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!-- index.wxml --&gt;</div><div class="line">&lt;import src="item.wxml"/&gt;</div><div class="line">&lt;template is="item" data="&#123;&#123;text: 'forbar'&#125;&#125;"/&gt;</div></pre></td></tr></table></figure></p>
<p>使用include:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- index.wxml --&gt;</div><div class="line">&lt;include src="header.wxml"/&gt;</div><div class="line">&lt;view&gt; body &lt;/view&gt;</div><div class="line">&lt;include src="footer.wxml"/&gt;</div><div class="line"></div><div class="line">&lt;!-- header.wxml --&gt;</div><div class="line">&lt;view&gt; header &lt;/view&gt;</div><div class="line"></div><div class="line">&lt;!-- footer.wxml --&gt;</div><div class="line">&lt;view&gt; footer &lt;/view&gt;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本把开发文档看了一遍，会React的话很好上手。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信小程序最近貌似比较火, 研究一番觉得和React写法很相似, 也是封装了一系列自己的组件, 同为JS写代码, 且还定义了自己的wxss样式表等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WeChat" scheme="http://blog.xigulu.com/tags/WeChat/"/>
    
  </entry>
  
  <entry>
    <title>【iOS10】适配问题集合</title>
    <link href="http://blog.xigulu.com/2016/10/12/iOS10-adapt/"/>
    <id>http://blog.xigulu.com/2016/10/12/iOS10-adapt/</id>
    <published>2016-10-11T16:00:00.000Z</published>
    <updated>2016-11-27T06:04:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于Xcode8签名问题使原先的三方插件都不能用,尝试去除签名,但打开Xcode却时常闪退,所以一直在Xcode7与Xocde8之间切换使用.顺便整理一下旧项目中遇到的各种iOS10与Xcode8的适配问题.</p>
<a id="more"></a>
<hr>
<h2 id="ATS问题"><a href="#ATS问题" class="headerlink" title="ATS问题"></a>ATS问题</h2><h2 id="新的推送"><a href="#新的推送" class="headerlink" title="新的推送"></a>新的推送</h2><p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Xcode8签名问题使原先的三方插件都不能用,尝试去除签名,但打开Xcode却时常闪退,所以一直在Xcode7与Xocde8之间切换使用.顺便整理一下旧项目中遇到的各种iOS10与Xcode8的适配问题.&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.xigulu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>【iOS10】SiriKit</title>
    <link href="http://blog.xigulu.com/2016/09/10/iOS10-sirikit/"/>
    <id>http://blog.xigulu.com/2016/09/10/iOS10-sirikit/</id>
    <published>2016-09-09T16:00:00.000Z</published>
    <updated>2016-11-27T06:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSPatch可实现项目上线后, 热修复已知的bug.  JSPatch 可以让你用 JavaScript 书写原生 iOS APP。</p>
<a id="more"></a>
<hr>
<p>## </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSPatch可实现项目上线后, 热修复已知的bug.  JSPatch 可以让你用 JavaScript 书写原生 iOS APP。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.xigulu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>【FFmpeg】FFmpeg与FFplay常用命令</title>
    <link href="http://blog.xigulu.com/2016/08/25/FFMPEG-command/"/>
    <id>http://blog.xigulu.com/2016/08/25/FFMPEG-command/</id>
    <published>2016-08-24T16:00:00.000Z</published>
    <updated>2016-11-17T06:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。可用于日常视频格式转换, 采集, 抓图等. 也可以用来视频推流, 流媒体播放等等.<br><a href="https://ffmpeg.org/" target="_blank" rel="external">https://ffmpeg.org/</a>,<br><a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="external">https://github.com/FFmpeg/FFmpeg</a></p>
<a id="more"></a>
<hr>
<h2 id="ffmpeg常用命令"><a href="#ffmpeg常用命令" class="headerlink" title="ffmpeg常用命令"></a>ffmpeg常用命令</h2><p>ffmpeg主要用于转码.<br><a href="http://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">http://ffmpeg.org/ffmpeg.html</a></p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>$ ffmpeg -i input.avi -b:v 640k output.ts     将input.avi转码成output.ts，设置视频的码率为640kbps<br>$ ffmpeg -i input.mp4 output.avi           将mp4转换为avi </p>
<p><strong>分离视频音频流</strong>:<br>$ ffmpeg -i input_file -vcodec copy -an output_file_video　　//分离视频流<br>$ ffmpeg -i input_file -acodec copy -vn output_file_audio　　//分离音频流</p>
<p><strong>视频封装</strong>:<br>$ ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file  //音频,视频组装起来</p>
<p><strong>视频转码</strong>:<br>$ ffmpeg –i test.mp4 –vcodec h264 –s 352<em>278 –an –f m4v test.264 //转码为码流原始文件<br>$ ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352</em>278 –an –f m4v test.264 //转码为码流原始文件<br>$ ffmpeg –i test.avi -vcodec mpeg4 –vtag xvid –qsame test_xvid.avi //转码为封装文件<br>-bf B帧数目控制<br>-g 关键帧间隔控制<br>-s 分辨率控制</p>
<p><strong>视频剪切</strong>:<br>$ ffmpeg –i test.avi –r 1 –f image2 image-%3d.jpeg //提取图片<br>$ ffmpeg -ss 0:1:30 -t 0:0:20 -i input.avi -vcodec copy -acodec copy output.avi //剪切视频<br>-r 提取图像的频率<br>-ss 开始时间<br>-t 持续时间</p>
<p><strong>视频录制</strong>:<br>$ ffmpeg –i rtsp://192.168.3.205:5555/test –vcodec copy out.avi</p>
<h3 id="推流命令"><a href="#推流命令" class="headerlink" title="推流命令"></a>推流命令</h3><p>视频文件文件推流:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -re -i /Users/xu/Desktop/bangbangbang.mp4 -vcodec libx264 -acodec aac <span class="_">-f</span> flv rtmp://192.168.2.109:1935/mylive/room</div></pre></td></tr></table></figure></p>
<p>桌面录制推流:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg <span class="_">-f</span> avfoundation -i <span class="string">"1"</span> -vcodec libx264 -preset ultrafast -acodec libfaac <span class="_">-f</span> flv rtmp://192.168.2.109:1935/mylive/room</div></pre></td></tr></table></figure></p>
<h2 id="ffplay常用命令"><a href="#ffplay常用命令" class="headerlink" title="ffplay常用命令"></a>ffplay常用命令</h2><p>ffplay主要用于播放.<br><a href="http://ffmpeg.org/ffplay.html" target="_blank" rel="external">http://ffmpeg.org/ffplay.html</a></p>
<p>$ ffplay test.avi       播放test.avi(当为音频时, 会直接播放)<br>$ ffplay rtmp://up.v.test.com/live/stream      直接播放网络直流<br>$ ffplay -showmode 1 test.mp3                  将音频以波形展示</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。可用于日常视频格式转换, 采集, 抓图等. 也可以用来视频推流, 流媒体播放等等.&lt;br&gt;&lt;a href=&quot;https://ffmpeg.org/&quot;&gt;https://ffmpeg.org/&lt;/a&gt;,&lt;br&gt;&lt;a href=&quot;https://github.com/FFmpeg/FFmpeg&quot;&gt;https://github.com/FFmpeg/FFmpeg&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="FFmpeg" scheme="http://blog.xigulu.com/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>【iOS】hotfix之JSPatch</title>
    <link href="http://blog.xigulu.com/2016/08/08/iOS-hotfix/"/>
    <id>http://blog.xigulu.com/2016/08/08/iOS-hotfix/</id>
    <published>2016-08-07T16:00:00.000Z</published>
    <updated>2016-11-17T06:50:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSPatch可实现项目上线后, 热修复已知的bug.  JSPatch 可以让你用 JavaScript 书写原生 iOS APP。只需在项目引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。<br>JSPatch源码<a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">https://github.com/bang590/JSPatch</a>,  以及免自建服务器集成框架<a href="http://jspatch.com/" target="_blank" rel="external">http://jspatch.com/</a></p>
<a id="more"></a>
<hr>
<h2 id="JavaScript对应OC语法说明"><a href="#JavaScript对应OC语法说明" class="headerlink" title="JavaScript对应OC语法说明"></a>JavaScript对应OC语法说明</h2><p><a href="https://github.com/bang590/JSPatch/blob/master/README-CN.md" target="_blank" rel="external">https://github.com/bang590/JSPatch/blob/master/README-CN.md</a>(中文参考)<br><a href="http://bang590.github.io/JSPatchConvertor/" target="_blank" rel="external">http://bang590.github.io/JSPatchConvertor/</a>(OC转换为JS在线工具)<br><a href="https://github.com/bang590/JSPatchX" target="_blank" rel="external">https://github.com/bang590/JSPatchX</a>(Xcode写JSPatch自动补全插件)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用require引入要使用的OC类</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'UIView, UIColor, UISlider, NSIndexPath'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 调用类方法</span></div><div class="line"><span class="keyword">var</span> redColor = UIColor.redColor();</div><div class="line"></div><div class="line"><span class="comment">// 调用实例方法</span></div><div class="line"><span class="keyword">var</span> view = UIView.alloc().init();</div><div class="line">view.setNeedsLayout();</div><div class="line"></div><div class="line"><span class="comment">// 设置属性</span></div><div class="line">view.setBackgroundColor(redColor);</div><div class="line"></div><div class="line"><span class="comment">// 获取属性 </span></div><div class="line"><span class="keyword">var</span> bgColor = view.backgroundColor();</div><div class="line"></div><div class="line"><span class="comment">// 多参数方法名用'_'隔开：</span></div><div class="line"><span class="comment">// OC：NSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:1];</span></div><div class="line"><span class="keyword">var</span> indexPath = NSIndexPath.indexPathForRow_inSection(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 如果要把 `NSArray` / `NSString` / `NSDictionary` 转为对应的 JS 类型，使用 `.toJS()` 接口.</span></div><div class="line"><span class="keyword">var</span> arr = <span class="built_in">require</span>(<span class="string">'NSMutableArray'</span>).alloc().init()</div><div class="line">arr.addObject(<span class="string">"JS"</span>)</div><div class="line">jsArr = arr.toJS()</div><div class="line"><span class="built_in">console</span>.log(jsArr.push(<span class="string">"Patch"</span>).join(<span class="string">''</span>))  <span class="comment">//output: JSPatch</span></div><div class="line"></div><div class="line"><span class="comment">// 在JS用字典的方式表示 CGRect / CGSize / CGPoint / NSRange</span></div><div class="line"><span class="keyword">var</span> view = UIView.alloc().initWithFrame(&#123;x:<span class="number">20</span>, y:<span class="number">20</span>, width:<span class="number">100</span>, height:<span class="number">100</span>&#125;);</div><div class="line"><span class="keyword">var</span> x = view.bounds().x;</div><div class="line"></div><div class="line"><span class="comment">// block 从 JavaScript 传入 Objective-C 时，需要写上每个参数的类型。</span></div><div class="line"><span class="comment">// OC Method: + (void)request:(void(^)(NSString *content, BOOL success))callback</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'JPObject'</span>).request(block(<span class="string">"NSString *, BOOL"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ctn, succ</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (succ) log(ctn)</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">// GCD</span></div><div class="line">dispatch_after(<span class="function"><span class="keyword">function</span>(<span class="params">1.0, function(</span>)</span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;))</div><div class="line">dispatch_async_main(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="JSPatch热修复使用"><a href="#JSPatch热修复使用" class="headerlink" title="JSPatch热修复使用"></a>JSPatch热修复使用</h2><h3 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h3><p>1.# import “JPEngine.h”<br>2.调用[JPEngine startEngine]<br>3.通过[JPEngine evaluateScript:@””]接口执行 JavaScript。(可以直接写JavaScript, 也可用从文件读入, 远程获取)</p>
<h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><p>代码功能为: 改变ViewController中预先定义的row行数, Cell背景颜色, 与修复越界 .<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    [JPEngine startEngine];</div><div class="line">    <span class="comment">//读取本地的test.js文件</span></div><div class="line">    <span class="built_in">NSString</span> *sourcePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"test"</span> ofType:<span class="string">@"js"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,sourcePath);</div><div class="line">    <span class="built_in">NSString</span> *script = [<span class="built_in">NSString</span> stringWithContentsOfFile:sourcePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">    [JPEngine evaluateScript:script];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>test.js文件中内容:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">defineClass(<span class="string">"ViewController"</span>, &#123;</div><div class="line">            </div><div class="line">    tableView_numberOfRowsInSection: <span class="function"><span class="keyword">function</span>(<span class="params">tableView, section</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    &#125;,</div><div class="line">  </div><div class="line">    tableView_cellForRowAtIndexPath: <span class="function"><span class="keyword">function</span>(<span class="params">tableView, indexPath</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"cell"</span>)</div><div class="line">        <span class="keyword">if</span> (!cell) &#123;</div><div class="line">            cell = <span class="built_in">require</span>(<span class="string">'UITableViewCell'</span>).alloc().initWithStyle_reuseIdentifier(<span class="number">0</span>, <span class="string">"cell"</span>)</div><div class="line">        &#125;</div><div class="line">        cell.textLabel().setText(<span class="string">"xn"</span>);</div><div class="line">        <span class="keyword">var</span> redColor = <span class="built_in">require</span>(<span class="string">'UIColor'</span>).redColor();</div><div class="line">        cell.setBackgroundColor(redColor);</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">//instance method definitions</span></div><div class="line">    tableView_didSelectRowAtIndexPath: <span class="function"><span class="keyword">function</span>(<span class="params">tableView, indexPath</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> row = indexPath.row()</div><div class="line">        <span class="keyword">if</span> (self.dataSource().length &gt; row) &#123; <span class="comment">// 修复数组越界</span></div><div class="line">            <span class="keyword">var</span> content = self.dataArr()[row];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, &#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>这些JS代码不必手写, 可以先写出OC代码, 然后用在线工具转换即可.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JSPatch能做到通过JS调用和改写OC方法最根本的原因是 Objective-C 是动态语言，OC上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名和方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。所以 JSPatch 的原理就是：JS传递字符串给OC，OC通过 Runtime 接口调用和替换OC方法。JS的作用只是一个信使，具体实现还是靠OC。</p>
<p>以下两篇文章为作者自己写的JSPatch实现原理:</p>
<p><a href="http://blog.cnbang.net/tech/2808/" target="_blank" rel="external">http://blog.cnbang.net/tech/2808/</a>(实现原理一)<br><a href="http://blog.cnbang.net/tech/2855/" target="_blank" rel="external">http://blog.cnbang.net/tech/2855/</a>(实现原理二)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSPatch可实现项目上线后, 热修复已知的bug.  JSPatch 可以让你用 JavaScript 书写原生 iOS APP。只需在项目引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。&lt;br&gt;JSPatch源码&lt;a href=&quot;https://github.com/bang590/JSPatch&quot;&gt;https://github.com/bang590/JSPatch&lt;/a&gt;,  以及免自建服务器集成框架&lt;a href=&quot;http://jspatch.com/&quot;&gt;http://jspatch.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.xigulu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>【iOS】视频直播与RTMP推流</title>
    <link href="http://blog.xigulu.com/2016/07/28/iOS-Video-Living-RTMP/"/>
    <id>http://blog.xigulu.com/2016/07/28/iOS-Video-Living-RTMP/</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2016-11-24T05:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>视频直播很火，涉及的东西也多，需要优化的东西更多。如果使用第三方SDK会省下很多精力就可以做一个流畅直播app。本文记录不使用三方直播SDK实现直播，包括Nginx配置、推流、播放等。</p>
<a id="more"></a>
<hr>
<h2 id="Nginx模块配置RMTP"><a href="#Nginx模块配置RMTP" class="headerlink" title="Nginx模块配置RMTP"></a>Nginx模块配置RMTP</h2><p>nginx需要安装<a href="https://github.com/arut/nginx-rtmp-module" target="_blank" rel="external">nginx-rtmp-module</a>模块才能进行rtmp推流. 因此需要自己编译nginx源码并安装模块.</p>
<h3 id="基本安装配置"><a href="#基本安装配置" class="headerlink" title="基本安装配置"></a>基本安装配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev unzip    依赖</div><div class="line">$ wget http://nginx.org/download/nginx-1.11.3.tar.gz          下载Nginx(可以改版本号)</div><div class="line">$ tar -zxvf nginx-1.11.3.tar.gz           解压</div><div class="line"></div><div class="line">$ wget https://github.com/arut/nginx-rtmp-module/archive/master.zip       下载RTMP模块</div><div class="line">$ unzip nginx-rtmp-module-master.zip         解压(和nginx解压在同一根目录)</div><div class="line"></div><div class="line">$ ./configure --add-module=../nginx-rtmp-module-master    配置并增加模块(跳转到Nginx解压目录执行)</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<h3 id="Nginx服务器配置"><a href="#Nginx服务器配置" class="headerlink" title="Nginx服务器配置"></a>Nginx服务器配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">rtmp &#123;</div><div class="line"></div><div class="line">  server &#123;</div><div class="line">      listen 1935;</div><div class="line">      #直播流配置, application后的名字可改</div><div class="line">      application mylive &#123;</div><div class="line">          live on;</div><div class="line">          #为 rtmp 引擎设置最大连接数。默认为 off</div><div class="line">          max_connections 1024;</div><div class="line">       &#125;</div><div class="line">      application hls&#123;</div><div class="line">          live on;</div><div class="line">          hls on;</div><div class="line">          hls_path /usr/local/var/www/hls;</div><div class="line">          hls_fragment 1s;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h2><p>由上面的配置, 再加上我的本地服务器地址得到rtmp推流地址为:<br>rtmp://192.168.2.109:1935/mylive/room</p>
<ol>
<li><p>使用ffmpeg工具推流</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -re -i /Users/xuneng/Desktop/Testfile/Rolling_in_the_deep.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://192.168.2.109:1935/mylive/room</div></pre></td></tr></table></figure>
</li>
<li><p>使用OBS等软件推流<br>只需要填入地址即可rtmp://192.168.2.109:1935/mylive/room</p>
</li>
</ol>
<h2 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h2><ol>
<li><p>使用ffmpeg工具播放</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ffplay rtmp://192.168.2.109:1935/mylive/room      直接播放网络直流</div></pre></td></tr></table></figure>
</li>
<li><p>使用VLC等播放器播放<br>打开VLC，然后File-&gt;open network-&gt;输入：<br>rtmp://192.168.2.109:1935/mylive/room</p>
</li>
</ol>
<h2 id="iOS端推流与播放"><a href="#iOS端推流与播放" class="headerlink" title="iOS端推流与播放"></a>iOS端推流与播放</h2><p>服务器还是用上面的Nginx配置, iOS端主要做推流与播放.<br>推流有很多框架可以用,有基于C++的,也有OC的, 有的还集成了GPUImage进行美颜等功能.<br><a href="https://github.com/jgh-/VideoCore" target="_blank" rel="external">https://github.com/jgh-/VideoCore</a>       C++很多推流框架都是对VideoCore的二次开发<br><a href="https://github.com/runner365/LiveVideoCoreSDK" target="_blank" rel="external">https://github.com/runner365/LiveVideoCoreSDK</a>   C++美颜直播和滤镜功能<br><a href="https://github.com/LaiFengiOS/LFLiveKit" target="_blank" rel="external">https://github.com/LaiFengiOS/LFLiveKit</a>      OC写的.(集成GPUImage)</p>
<p>播放端主要将收到的流进行播放, 有很多需要优化的地方. 用的比较多的是基于ffmpeg的ijkplayer.<br><a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="external">https://github.com/Bilibili/ijkplayer</a>   (基于FFmpeg, 支持VideoToolbox)<br><a href="https://github.com/pili-engineering/PLPlayerKit" target="_blank" rel="external">https://github.com/pili-engineering/PLPlayerKit</a>      又一个播放的<br><a href="https://wiki.videolan.org/VLCKit/" target="_blank" rel="external">https://wiki.videolan.org/VLCKit/</a>                    VLC的(MobileVLCKit)</p>
<p>以后有时间再总结并写一些iOS优化相关的文章.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视频直播很火，涉及的东西也多，需要优化的东西更多。如果使用第三方SDK会省下很多精力就可以做一个流畅直播app。本文记录不使用三方直播SDK实现直播，包括Nginx配置、推流、播放等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.xigulu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>【ReactNative】网络请求</title>
    <link href="http://blog.xigulu.com/2016/07/16/ReactNative-Network/"/>
    <id>http://blog.xigulu.com/2016/07/16/ReactNative-Network/</id>
    <published>2016-07-15T16:00:00.000Z</published>
    <updated>2016-08-31T11:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>React Native中使用Fetch获取网络请求, 可以定义各种请求参数. 也可以使用XMLHttpRequest, 或其他三方库. 支持WebSocket, 使用很方便.</p>
<a id="more"></a>
<hr>
<p><strong>注意</strong>: iOS9以上都是默认https(以下使用的都是http), 所以在info.plist中添加:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Fetch使用"><a href="#Fetch使用" class="headerlink" title="Fetch使用"></a>Fetch使用</h2><h3 id="自定义详细参数"><a href="#自定义详细参数" class="headerlink" title="自定义详细参数"></a>自定义详细参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//POST 增加一个user</span></div><div class="line">fetch(<span class="string">'http://localhost:3000/users'</span>,&#123;</div><div class="line">    method:<span class="string">'POST'</span>,</div><div class="line">    headers:&#123;</div><div class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</div><div class="line">    &#125;,</div><div class="line">    body:<span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">        name:<span class="string">'xuneng'</span>,</div><div class="line">        age:<span class="string">'123'</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="返回的数据处理-Promise-异步"><a href="#返回的数据处理-Promise-异步" class="headerlink" title="返回的数据处理(Promise,异步)"></a>返回的数据处理(Promise,异步)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//GET 获取所有users</span></div><div class="line">fetch(<span class="string">'http://localhost:3000/users'</span>)</div><div class="line">.then((response)=&gt;response.json())  <span class="comment">//response.text()返回文本</span></div><div class="line">.then((responseJson)=&gt;&#123;</div><div class="line">    Alert.alert(<span class="built_in">JSON</span>.stringify(responseJson)) <span class="comment">//json输出弹窗</span></div><div class="line">    <span class="built_in">console</span>.warn(<span class="keyword">new</span> <span class="built_in">Date</span>().getMilliseconds());</div><div class="line">&#125;)</div><div class="line">.catch((error)=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.warn(error)</div><div class="line">&#125;).done()</div><div class="line"></div><div class="line"><span class="built_in">console</span>.warn(<span class="string">'证明请求是异步的:'</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>().getMilliseconds());</div></pre></td></tr></table></figure>
<h2 id="XMLHttpRequest方式"><a href="#XMLHttpRequest方式" class="headerlink" title="XMLHttpRequest方式"></a>XMLHttpRequest方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var request = new XMLHttpRequest();</div><div class="line">request.onreadystatechange = (e) =&gt; &#123;</div><div class="line">    if (request.readyState !== 4) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (request.status === 200) &#123;</div><div class="line">        console.log(&apos;success&apos;, request.responseText);</div><div class="line">        Alert.alert(request.responseText)</div><div class="line">    &#125; else &#123;</div><div class="line">        console.warn(&apos;error&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">request.open(&apos;GET&apos;, &apos;http://localhost:3000/users&apos;);</div><div class="line">request.send();</div></pre></td></tr></table></figure>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var ws = new WebSocket(&apos;ws://localhost:8080&apos;);</div><div class="line"></div><div class="line">ws.onopen = () =&gt; &#123;</div><div class="line">  // connection opened</div><div class="line">  ws.send(&apos;something123&apos;); // send a message</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onmessage = (e) =&gt; &#123;</div><div class="line">  // a message was received</div><div class="line">  console.log(e.data);</div><div class="line">  Alert.alert(e.data)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onerror = (e) =&gt; &#123;</div><div class="line">  // an error occurred</div><div class="line">  console.log(e.message);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onclose = (e) =&gt; &#123;</div><div class="line">  // connection closed</div><div class="line">  console.log(e.code, e.reason);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h2><p>用ES6的写法.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    View,</div><div class="line">    Image,</div><div class="line">    ActivityIndicatorIOS,</div><div class="line">    TouchableOpacity,</div><div class="line">    TouchableHighlight,</div><div class="line">    Navigator,</div><div class="line">    Alert,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="comment">//导出组件</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="comment">//自定义请求参数</span></div><div class="line">    fetchDetail()&#123;</div><div class="line">        <span class="comment">//POST 增加一个user</span></div><div class="line">        fetch(<span class="string">'http://localhost:3000/users'</span>,&#123;</div><div class="line">            method:<span class="string">'POST'</span>,</div><div class="line">            headers:&#123;</div><div class="line">                <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</div><div class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</div><div class="line">            &#125;,</div><div class="line">            body:<span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">                name:<span class="string">'xuneng'</span>,</div><div class="line">                age:<span class="string">'123'</span></div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//fetch并处理返回(Promise,异步).</span></div><div class="line">    fetchCallback()&#123;</div><div class="line">        <span class="comment">//GET 获取所有users</span></div><div class="line">        fetch(<span class="string">'http://localhost:3000/users'</span>)</div><div class="line">        .then((response)=&gt;response.json())  <span class="comment">//response.text()返回文本</span></div><div class="line">        .then((responseJson)=&gt;&#123;</div><div class="line">            Alert.alert(<span class="built_in">JSON</span>.stringify(responseJson)) <span class="comment">//json输出弹窗</span></div><div class="line">            <span class="built_in">console</span>.warn(<span class="keyword">new</span> <span class="built_in">Date</span>().getMilliseconds());</div><div class="line">        &#125;)</div><div class="line">        .catch((error)=&gt;&#123;</div><div class="line">            <span class="built_in">console</span>.warn(error)</div><div class="line">        &#125;).done()</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.warn(<span class="string">'证明请求是异步的:'</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>().getMilliseconds());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//使用XMLHttpRequest或其他3方库处理网络请求</span></div><div class="line">    myXMLHttpRequest()&#123;</div><div class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        request.onreadystatechange = (e) =&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (request.readyState !== <span class="number">4</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'success'</span>, request.responseText);</div><div class="line">                Alert.alert(request.responseText)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">console</span>.warn(<span class="string">'error'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        request.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3000/users'</span>);</div><div class="line">        request.send();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//WebSocket</span></div><div class="line">    myWebSocket()&#123;</div><div class="line">        <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>);</div><div class="line"></div><div class="line">        ws.onopen = () =&gt; &#123;</div><div class="line">          <span class="comment">// connection opened</span></div><div class="line">          ws.send(<span class="string">'something123'</span>); <span class="comment">// send a message</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        ws.onmessage = (e) =&gt; &#123;</div><div class="line">          <span class="comment">// a message was received</span></div><div class="line">          <span class="built_in">console</span>.log(e.data);</div><div class="line">          Alert.alert(e.data)</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        ws.onerror = (e) =&gt; &#123;</div><div class="line">          <span class="comment">// an error occurred</span></div><div class="line">          <span class="built_in">console</span>.log(e.message);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        ws.onclose = (e) =&gt; &#123;</div><div class="line">          <span class="comment">// connection closed</span></div><div class="line">          <span class="built_in">console</span>.log(e.code, e.reason);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;flex:1,justifyContent:</span>'<span class="attr">center</span>',<span class="attr">alignItems:</span>'<span class="attr">center</span>'&#125;&#125;&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">style</span>=<span class="string">&#123;mystyle.button&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.fetchDetail.bind(this)&#125;</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Fetch detail<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">style</span>=<span class="string">&#123;mystyle.button&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.fetchCallback.bind(this)&#125;</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Fetch With Callback<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">style</span>=<span class="string">&#123;mystyle.button&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.myXMLHttpRequest.bind(this)&#125;</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>XMLHttpRequest处理请求<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">style</span>=<span class="string">&#123;mystyle.button&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.myWebSocket.bind(this)&#125;</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>WebSocket<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> mystyle = StyleSheet.create(&#123;</div><div class="line">    button:&#123;</div><div class="line">        width:<span class="number">180</span>,</div><div class="line">        height:<span class="number">50</span>,</div><div class="line">        justifyContent:<span class="string">'center'</span>,</div><div class="line">        backgroundColor:<span class="string">'#e2e'</span>,</div><div class="line">        alignItems:<span class="string">'center'</span>,</div><div class="line">        margin:<span class="number">15</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>参考: <a href="https://facebook.github.io/react-native/docs/network.html#content" target="_blank" rel="external">https://facebook.github.io/react-native/docs/network.html#content</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native中使用Fetch获取网络请求, 可以定义各种请求参数. 也可以使用XMLHttpRequest, 或其他三方库. 支持WebSocket, 使用很方便.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://blog.xigulu.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>【iOS】Swift3中的一些变化</title>
    <link href="http://blog.xigulu.com/2016/07/08/iOS-Swift3-feature/"/>
    <id>http://blog.xigulu.com/2016/07/08/iOS-Swift3-feature/</id>
    <published>2016-07-07T16:00:00.000Z</published>
    <updated>2016-09-01T15:55:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift3较Swift2.x改动较多, 其实用Swift写iOS应用确实比OC写节省时间与代码量。Swift3的改动主要集中在语法简化与规范上. 如:取消NS前缀,新的GCD,Core Graphics语法,去除方法中不必要词等.</p>
<blockquote>
<p>很多从MRC就开始iOS开发的同学至今不用Swift开发的原因，就是因为Swift语法一直在变更，不稳定。一个小的语法变化，有时候会带来很多工作量，不仅整个项目处处需要改，三方库也要跟着改，且语法转换工具只能作参考。相比较下OC就没这么多麻烦。不过改变是好事, Swift是Apple未来力推的语言。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>本文示例代码参加我的Github:<br><a href="https://github.com/xn4545945/SwiftLearning" target="_blank" rel="external">https://github.com/xn4545945/SwiftLearning</a></p>
<h2 id="典型变化"><a href="#典型变化" class="headerlink" title="典型变化"></a>典型变化</h2><p>Swift语法演变参考:<br><a href="https://github.com/apple/swift-evolution" target="_blank" rel="external">https://github.com/apple/swift-evolution</a> </p>
<h3 id="第一个参数的label"><a href="#第一个参数的label" class="headerlink" title="第一个参数的label"></a>第一个参数的label</h3><p>1.方法第一个参数变化. 在swift 3.0里使用方法里参数的lable来完成说明方法功能的作用。<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md" target="_blank" rel="external">https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一句是 Swift 2 语法，第二句是 Swift 3 语法</span></div><div class="line"></div><div class="line"><span class="string">"mystring"</span>.writeToFile(<span class="string">"filename.txt"</span>, atomically: <span class="literal">true</span>, encoding: <span class="type">NSUTF8StringEncoding</span>)</div><div class="line"><span class="string">"mystring"</span>.write(toFile: <span class="string">"filename.txt"</span>, atomically: <span class="literal">true</span>, encoding:<span class="type">NSUTF8StringEncoding</span>)</div><div class="line"></div><div class="line"><span class="type">UIFont</span>.preferredFontForTextStyle(<span class="type">UIFontTextStyleSubheadline</span>)</div><div class="line"><span class="type">UIFont</span>.preferredFont(forTextStyle: <span class="type">UIFontTextStyleSubheadline</span>)</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewForZoomingInScrollView</span><span class="params">(scrollView: UIScrollView)</span></span> -&gt; <span class="type">UIView</span>?</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewForZooming</span><span class="params">(<span class="keyword">in</span> scrollView: UIScrollView)</span></span> -&gt; <span class="type">UIView</span>?</div><div class="line"></div><div class="line"><span class="type">NSTimer</span>.scheduledTimerWithTimeInterval(<span class="number">0.35</span>, target: <span class="keyword">self</span>, selector: #selector(reset), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div><div class="line"><span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">0.35</span>, target: <span class="keyword">self</span>, selector: #selector(reset), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h3 id="部分方法名简化"><a href="#部分方法名简化" class="headerlink" title="部分方法名简化"></a>部分方法名简化</h3><p>2.简化一些方法的写法. 去除不必要的词.<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md" target="_blank" rel="external">https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一句是 Swift 2 语法，第二句是 Swift 3 语法</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> blue = <span class="type">UIColor</span>.blueColor()</div><div class="line"><span class="keyword">let</span> blue = <span class="type">UIColor</span>.blue()</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="built_in">min</span> = numbers.<span class="built_in">minElement</span>()</div><div class="line"><span class="keyword">let</span> <span class="built_in">min</span> = numbers.<span class="built_in">min</span>()</div><div class="line"></div><div class="line">attributedString.appendAttributedString(anotherString)</div><div class="line">attributedString.append(anotherString)</div><div class="line"></div><div class="line">names.insert(<span class="string">"Jane"</span>, atIndex: <span class="number">0</span>)</div><div class="line">names.insert(<span class="string">"Jane"</span>, at: <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="type">UIDevice</span>.currentDevice()</div><div class="line"><span class="type">UIDevice</span>.current()</div></pre></td></tr></table></figure>
<h3 id="GCD写法变化"><a href="#GCD写法变化" class="headerlink" title="GCD写法变化"></a>GCD写法变化</h3><p>3.新的GCD写法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Swift 2 语法</span></div><div class="line"><span class="keyword">let</span> queue = dispatch_queue_create(<span class="string">"com.test.myqueue"</span>, <span class="literal">nil</span>)</div><div class="line">dispatch_async(queue) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Swift 3 语法</span></div><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"com.test.myqueue"</span>)</div><div class="line">queue.async &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Core-Graphics写法变化"><a href="#Core-Graphics写法变化" class="headerlink" title="Core Graphics写法变化"></a>Core Graphics写法变化</h3><p>4.新的Core Graphics写法<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md" target="_blank" rel="external">https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Swift 2 语法</span></div><div class="line"><span class="keyword">let</span> ctx = <span class="type">UIGraphicsGetCurrentContext</span>()</div><div class="line"><span class="keyword">let</span> rectangle = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">512</span>, height: <span class="number">512</span>)</div><div class="line"><span class="type">CGContextSetFillColorWithColor</span>(ctx, <span class="type">UIColor</span>.blueColor().<span class="type">CGColor</span>)</div><div class="line"><span class="type">CGContextSetStrokeColorWithColor</span>(ctx, <span class="type">UIColor</span>.whiteColor().<span class="type">CGColor</span>)</div><div class="line"><span class="type">CGContextSetLineWidth</span>(ctx, <span class="number">10</span>)</div><div class="line"><span class="type">CGContextAddRect</span>(ctx, rectangle)</div><div class="line"><span class="type">CGContextDrawPath</span>(ctx, .<span class="type">FillStroke</span>)</div><div class="line"><span class="type">UIGraphicsEndImageContext</span>()</div><div class="line"></div><div class="line"><span class="comment">// Swift 3 语法</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> ctx = <span class="type">UIGraphicsGetCurrentContext</span>() &#123;</div><div class="line">    <span class="keyword">let</span> rectangle = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">512</span>, height: <span class="number">512</span>)</div><div class="line">    ctx.setFillColor(<span class="type">UIColor</span>.blue().cgColor)</div><div class="line">    ctx.setStrokeColor(<span class="type">UIColor</span>.white().cgColor)</div><div class="line">    ctx.setLineWidth(<span class="number">10</span>)</div><div class="line">    ctx.addRect(rectangle)</div><div class="line">    ctx.drawPath(using: .fillStroke)</div><div class="line">    </div><div class="line">    <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>5.枚举中 case 值的大小写: 枚举中定义的 case 值现在使用小驼峰命名法。这是为了和属性名或者变量名保持一致.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一句是 Swift 2 语法，第二句是 Swift 3 语法</span></div><div class="line"><span class="type">UIInterfaceOrientationMask</span>.<span class="type">Landscape</span></div><div class="line"><span class="type">UIInterfaceOrientationMask</span>.landscape</div><div class="line"></div><div class="line"><span class="type">NSTextAlignment</span>.<span class="type">Right</span></div><div class="line"><span class="type">NSTextAlignment</span>.<span class="keyword">right</span></div><div class="line"></div><div class="line"><span class="type">SKBlendMode</span>.<span class="type">Multiply</span></div><div class="line"><span class="type">SKBlendMode</span>.multiply</div></pre></td></tr></table></figure>
<h3 id="方法的动名词规范"><a href="#方法的动名词规范" class="headerlink" title="方法的动名词规范"></a>方法的动名词规范</h3><p>6.方法名为动词,名词的区别.<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md" target="_blank" rel="external">https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md</a></p>
<blockquote>
<p>如果这个方法名中包含“ed”或“ing”后缀，则表明这是一个名词。方法名为名词的方法有返回值。<br>如果不包含这些后缀，则很可能这是一个动词。以动词命名的方法会对某块引用的内存进行一些操作。即所谓的“修改某个值”。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">customArray.<span class="built_in">enumerate</span>()     <span class="comment">//内存中对原数组操作.</span></div><div class="line">customArray.enumerated()    <span class="comment">//不改变原数组,有返回值.</span></div><div class="line"></div><div class="line">customArray.<span class="built_in">reverse</span>()</div><div class="line">customArray.reversed()</div><div class="line"></div><div class="line">customArray.<span class="built_in">sort</span>() <span class="comment">// changed from .sortInPlace()</span></div><div class="line">customArray.sorted()</div></pre></td></tr></table></figure>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>7.函数在声明和调用时，都需要用括号将参数括住.<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md" target="_blank" rel="external">https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md</a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(a: Int)</span></span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Swift 2 语法</span></div><div class="line"><span class="type">Int</span> -&gt; <span class="type">Float</span></div><div class="line"><span class="type">String</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="type">T</span> -&gt; <span class="type">U</span></div><div class="line"><span class="type">Int</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">String</span></div><div class="line"></div><div class="line"><span class="comment">// Swift 3 语法</span></div><div class="line">(<span class="type">Int</span>) -&gt; <span class="type">Float</span></div><div class="line">(<span class="type">String</span>) -&gt; <span class="type">Int</span></div><div class="line">(<span class="type">T</span>) -&gt; <span class="type">U</span></div><div class="line">(<span class="type">Int</span>) -&gt; (<span class="type">Float</span>) -&gt; <span class="type">String</span></div></pre></td></tr></table></figure></p>
<h3 id="类去NS前缀"><a href="#类去NS前缀" class="headerlink" title="类去NS前缀"></a>类去NS前缀</h3><p>8.去除NS前缀<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md" target="_blank" rel="external">https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url1:<span class="type">NSURL</span></div><div class="line"><span class="keyword">var</span> url2:<span class="type">URL</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> data1:<span class="type">NSData</span></div><div class="line"><span class="keyword">var</span> data2:<span class="type">Data</span></div></pre></td></tr></table></figure>
<h2 id="其他改变"><a href="#其他改变" class="headerlink" title="其他改变"></a>其他改变</h2><ol>
<li><p>类方法<br>当你使用类方法或者类属性时，之前都必须像这样做：<br>CustomStruct.staticMethod()<br>现在可以使用首字母大写的Self来代替以前的写法，并且用类型的实例也能调用静态方法或者属性了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CustomStruct</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">staticMethod</span><span class="params">()</span></span> &#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">instanceMethod</span><span class="params">()</span></span></div><div class="line">    <span class="type">Self</span>.staticMethod() <span class="comment">// in the body of the type</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> customStruct = <span class="type">CustomStruct</span>()</div><div class="line">customStruct.<span class="type">Self</span>.staticMethod() <span class="comment">// on an instance of the type</span></div></pre></td></tr></table></figure>
</li>
<li><p>去掉C风格的For循环<br>for(var i = 0; i &lt; 10; i++)</p>
</li>
<li><p>去掉了柯里化语法<br>因为这个语法不容易理解，所以去掉了。</p>
</li>
<li><p>去掉了++ –语法</p>
</li>
<li><p>Swift Package Manager<br>Swift语言自己的包管理工具.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift3较Swift2.x改动较多, 其实用Swift写iOS应用确实比OC写节省时间与代码量。Swift3的改动主要集中在语法简化与规范上. 如:取消NS前缀,新的GCD,Core Graphics语法,去除方法中不必要词等.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很多从MRC就开始iOS开发的同学至今不用Swift开发的原因，就是因为Swift语法一直在变更，不稳定。一个小的语法变化，有时候会带来很多工作量，不仅整个项目处处需要改，三方库也要跟着改，且语法转换工具只能作参考。相比较下OC就没这么多麻烦。不过改变是好事, Swift是Apple未来力推的语言。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.xigulu.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://blog.xigulu.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>10分钟搞定一个漂亮的Node命令行工具</title>
    <link href="http://blog.xigulu.com/2016/07/01/Node-10min-cli-md5/"/>
    <id>http://blog.xigulu.com/2016/07/01/Node-10min-cli-md5/</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天做存储密码功能时，想在命令行测试下md5生成的字符串，于是找工具，试了一两个，不好用。决定自己做一个。初步的功能不必多，就是输入md5 “astring”，输出md5的结果即可。十分简单。</p>
<a id="more"></a>
<hr>
<blockquote>
<p><strong>扩展</strong>：Linux、Mac下用python或其他任意语言，写个生成md5字符串的脚本。然后软连接到环境变量的目录中，配置一下alias也可以很简单，几分钟搞定。</p>
</blockquote>
<p>nodejs的优势在于跨平台，一键安装。</p>
<p>本项目源码发布到npm了，后续会添加更多功能。(以最终安装的源码为准) <a href="https://www.npmjs.com/package/tools-cli" target="_blank" rel="external">https://www.npmjs.com/package/tools-cli</a></p>
<p><strong>安装</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install tools-cli -g</div></pre></td></tr></table></figure>
<p><strong>使用</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md5 yourstring</div></pre></td></tr></table></figure>
<p><strong>运行截图</strong>：</p>
<p><img src="http://7xlwuv.com1.z0.glb.clouddn.com/tools-cli-md5.png" alt=""></p>
<h2 id="相关库介绍"><a href="#相关库介绍" class="headerlink" title="相关库介绍"></a>相关库介绍</h2><h3 id="commander-js"><a href="#commander-js" class="headerlink" title="commander.js"></a>commander.js</h3><p>用于简化node命令行编写。提供方便出参数设置，帮助信息设置等。<br><a href="https://github.com/tj/commander.js" target="_blank" rel="external">https://github.com/tj/commander.js</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install commander --save</div></pre></td></tr></table></figure></p>
<h3 id="colors-js"><a href="#colors-js" class="headerlink" title="colors.js"></a>colors.js</h3><p>用于命令行作色<br><a href="https://github.com/Marak/colors.js" target="_blank" rel="external">https://github.com/Marak/colors.js</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install colors --save</div></pre></td></tr></table></figure></p>
<h3 id="node-md5"><a href="#node-md5" class="headerlink" title="node-md5"></a>node-md5</h3><p>md5字符串生成。<br><a href="https://github.com/pvorb/node-md5" target="_blank" rel="external">https://github.com/pvorb/node-md5</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install md5 --save</div></pre></td></tr></table></figure>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>);</div><div class="line"><span class="keyword">var</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</div><div class="line"><span class="keyword">var</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</div><div class="line"></div><div class="line">program</div><div class="line">    .version(<span class="string">'v'</span> + <span class="built_in">require</span>(<span class="string">'../package.json'</span>).version)</div><div class="line">    .description(<span class="string">'a md5 cli tool.'</span>)</div><div class="line">    .arguments(<span class="string">'[string]'</span>)</div><div class="line">    .option(<span class="string">'-s, --string'</span>, <span class="string">'input a string'</span>)</div><div class="line">    .parse(process.argv);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (program.args.length == <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(program.args[<span class="number">0</span>] + <span class="string">' &gt; MD5 Output:'</span>.rainbow);</div><div class="line">    <span class="built_in">console</span>.log(md5(program.args[<span class="number">0</span>]).underline.red);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (program.string) &#123;</div><div class="line">    <span class="built_in">console</span>.log(program.string + <span class="string">' &gt; MD5 Output:'</span>.rainbow);</div><div class="line">    <span class="built_in">console</span>.log(md5(program.string).underline.red);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'ERROR input!!!'</span>.rainbow);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="整合系统环境"><a href="#整合系统环境" class="headerlink" title="整合系统环境"></a>整合系统环境</h2><h3 id="将写的脚本整合到系统命令"><a href="#将写的脚本整合到系统命令" class="headerlink" title="将写的脚本整合到系统命令"></a>将写的脚本整合到系统命令</h3><p>1.源文件头部添加一行shell头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/env node</div></pre></td></tr></table></figure></p>
<p>2.再配置package.json        </p>
<blockquote>
<p>主要是添加这个: “bin”: { “md5”: “yourjs.js” }</p>
</blockquote>
<p>3.执行本地链接命令(当前目录下运行)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm link</div></pre></td></tr></table></figure></p>
<h2 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h2><p>发布前最重要的是配置package.json文件。</p>
<p>关于package.json文件配置，可以安装tools-cli后，打开安装路查看。</p>
<h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>1.注册个账号        <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a><br>2.执行命令 (最重要的是package.json文件里面的配置)</p>
<blockquote>
<p>npm init        (创建及配置package.json)<br>npm adduser     添加账户<br>npm config set registry <a href="http://registry.npmjs.org" target="_blank" rel="external">http://registry.npmjs.org</a>       切换回默认的源(如果切换了淘宝源的话)<br>npm publish                         发布模块. (写好代码与package.josn后, 同步也用这个)<br>npm unpublish 模块名 –force         删除已经发布的模块<br>npm whoami              查看当前登录的用户</p>
</blockquote>
<h3 id="相关错误"><a href="#相关错误" class="headerlink" title="相关错误"></a>相关错误</h3><p>报错: You do not have permission to publish ‘somepackage’.Are you logged in as the corrent user?<br><strong>原因</strong>: 你发布的包名和别人的重名了.<br><strong>解决</strong>: 修改了package.json文件的name选项.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做存储密码功能时，想在命令行测试下md5生成的字符串，于是找工具，试了一两个，不好用。决定自己做一个。初步的功能不必多，就是输入md5 “astring”，输出md5的结果即可。十分简单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://blog.xigulu.com/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="http://blog.xigulu.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>SHELL中使用sshrc与bashmarks</title>
    <link href="http://blog.xigulu.com/2016/06/18/SHELL_Tools_sshrc_bashmarks/"/>
    <id>http://blog.xigulu.com/2016/06/18/SHELL_Tools_sshrc_bashmarks/</id>
    <published>2016-06-17T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于经常需要使用终端来SSH远程服务器的同学来说，一个好的终端太重要了。Windows上有Xshell，好用且傻瓜，但Linux，Mac上的SSH客户端就比较磕碜。对于Mac和Linux上来说，最强大是还是终端本身，加上各种shell脚本的合理配置与使用，简直甩Windows很远。本文介绍2个工具，<a href="https://github.com/Russell91/sshrc" target="_blank" rel="external">sshrc</a>与<a href="https://github.com/huyng/bashmarks" target="_blank" rel="external">bashmarks</a>，快捷操作终端so easy！</p>
<a id="more"></a>
<hr>
<h2 id="常规登录SSH，修改alias"><a href="#常规登录SSH，修改alias" class="headerlink" title="常规登录SSH，修改alias"></a>常规登录SSH，修改alias</h2><p>mac或Linux下登录SSH的方式很多：</p>
<blockquote>
<p>可以配置~/.ssh/config文件；</p>
<p>可以设置alias；</p>
<p>mac下还可以配置iTerm的Profiles命令，快捷登录。</p>
</blockquote>
<p>就一条命令：（username及ip换成远程主机对应的username与ip）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh username@192.168.x.x</div></pre></td></tr></table></figure>
<p>然后会要求输入远程主机的登录密码。</p>
<p>(出错时先清理下旧的公匙 ssh-keygen -R 192.168.x.x)</p>
<h3 id="配置与使用alias"><a href="#配置与使用alias" class="headerlink" title="配置与使用alias"></a>配置与使用alias</h3><p>操作远程主机经常需要跳转到不同的路径，修改各种配置文件。这时候有一个快捷命令就很方便。</p>
<p>Windows的Xshell上有快捷命令栏，直接图形化添加与配置，点击就能使用，很赞。</p>
<p>Mac与Linux上就要借助alias配置来做。全程用键盘操作，完全自定义。</p>
<p>1.添加自定义alias（将快捷命令写入~/.bashrc文件即可）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"alias ssh1='ssh xuneng@192.168.2.123'"</span> &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>
<p>2.重新加载配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure></p>
<p>3.使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh1</div></pre></td></tr></table></figure></p>
<p>如果是用zsh或者其他shell，写入不同的shell配置项即可。如 ~/.zshrc 文件。（修改也一样）</p>
<h3 id="修改alias"><a href="#修改alias" class="headerlink" title="修改alias"></a><strong>修改</strong>alias</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.bashrc</div></pre></td></tr></table></figure>
<p>找到对应的alias项 ：</p>
<blockquote>
<p>alias ssh1=’ssh xuneng@192.168.2.123’</p>
</blockquote>
<p>修改保存退出即可。</p>
<h2 id="【bashmarks】快捷设置与使用alias"><a href="#【bashmarks】快捷设置与使用alias" class="headerlink" title="【bashmarks】快捷设置与使用alias"></a>【bashmarks】快捷设置与使用alias</h2><p>bashmarks主要用来保存常用路径。支持tab键自动完成。</p>
<p>项目地址:</p>
<p><a href="https://github.com/huyng/bashmarks/" target="_blank" rel="external">https://github.com/huyng/bashmarks/</a></p>
<p>安装步骤:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. git <span class="built_in">clone</span> git://github.com/huyng/bashmarks.git</div><div class="line">2. <span class="built_in">cd</span> bashmarks</div><div class="line">3. make install</div><div class="line">4. add <span class="string">'source ~/.local/bin/bashmarks.sh'</span> to your .bashrc file (~/.bashrc)</div></pre></td></tr></table></figure>
<p>使用方法:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s &lt;bookmark_name&gt; - 保存当前路径,名字为bookmark_name</div><div class="line">g &lt;bookmark_name&gt; - 直接跳转到<span class="string">"bookmark_name"</span>对应的路径</div><div class="line">l                 - 列出所有的 bookmark</div><div class="line">d &lt;bookmark_name&gt; - 删除 bookmark</div><div class="line">p &lt;bookmark_name&gt; - Prints the directory associated with <span class="string">"bookmark_name"</span></div></pre></td></tr></table></figure>
<p>主要是s保存，g跳转，l列出所有，这3个命令比较常用。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>通常在终端中输入g会被快捷定位到git，输入l会被定位ls -l命令。（可在安装前一一输入进行检查）</p>
<p>因此导致以上插件安装与配置后并不能使用。</p>
<p>解决办法：</p>
<blockquote>
<p>vim ~/.bashrc 打开时配置项，找到关于g，l的alias配置，在前面加#号注释掉即可。</p>
</blockquote>
<h2 id="【sshrc】-带着你的-bashrc，-vimrc进入ssh"><a href="#【sshrc】-带着你的-bashrc，-vimrc进入ssh" class="headerlink" title="【sshrc】 带着你的.bashrc，.vimrc进入ssh"></a>【sshrc】 带着你的.bashrc，.vimrc进入ssh</h2><p>sshrc的作用就是当你登录ssh后，你仍然能使用本机上的配置的alias。</p>
<p>项目地址：</p>
<p><a href="https://github.com/Russell91/sshrc" target="_blank" rel="external">https://github.com/Russell91/sshrc</a></p>
<p>用于主机登录SSH后, 仍然可以用主机配置好的alias命令. (安装在主机, 作用在主机与远程服务器)</p>
<p>与前一个插件bashmarks的区别就是：bashmarks只作用安装的机器。</p>
<p>安装步骤：</p>
<p>MacOS:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install sshrc</div></pre></td></tr></table></figure>
<p>Ubuntu:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository ppa:russell<span class="_">-s</span>-stewart/ppa</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install sshrc</div></pre></td></tr></table></figure>
<p>其他Linux:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://raw.githubusercontent.com/Russell91/sshrc/master/sshrc &amp;&amp; chmod +x sshrc &amp;&amp; sudo mv sshrc /usr/<span class="built_in">local</span>/bin <span class="comment">#or anywhere else on your PATH</span></div></pre></td></tr></table></figure>
<p>使用方法:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"echo welcome"</span> &gt;&gt; ~/.sshrc    <span class="comment">#写入.sshrc文件</span></div><div class="line">$ sshrc me@myserver                  <span class="comment">#用sshrc登录ssh</span></div><div class="line">welcome</div><div class="line"></div><div class="line">$ <span class="built_in">echo</span> <span class="string">"alias ..='cd ..'"</span> &gt;&gt; ~/.sshrc     <span class="comment">#写入alias</span></div><div class="line">$ sshrc me@myserver                     </div><div class="line">$ <span class="built_in">type</span> ..                              <span class="comment">#打印对应alias详情</span></div><div class="line">.. is aliased to `<span class="built_in">cd</span> ..<span class="string">'</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上2个工具在Mac或Linux上使用还是相当方便的，结合Mac或Linux下一些终端命令，工作效率超越Windows图形工具。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于经常需要使用终端来SSH远程服务器的同学来说，一个好的终端太重要了。Windows上有Xshell，好用且傻瓜，但Linux，Mac上的SSH客户端就比较磕碜。对于Mac和Linux上来说，最强大是还是终端本身，加上各种shell脚本的合理配置与使用，简直甩Windows很远。本文介绍2个工具，&lt;a href=&quot;https://github.com/Russell91/sshrc&quot;&gt;sshrc&lt;/a&gt;与&lt;a href=&quot;https://github.com/huyng/bashmarks&quot;&gt;bashmarks&lt;/a&gt;，快捷操作终端so easy！&lt;/p&gt;
    
    </summary>
    
    
      <category term="SHELL" scheme="http://blog.xigulu.com/tags/SHELL/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取本博客首页与调试</title>
    <link href="http://blog.xigulu.com/2016/05/24/Python_spider_debug/"/>
    <id>http://blog.xigulu.com/2016/05/24/Python_spider_debug/</id>
    <published>2016-05-23T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想抓一点其他网站的内容，但是用PHP做感觉有点奇怪，单纯用正则表达式也比较不便。于是狠补了下Python的内容，虽然基本原理都是下载-&gt;分析-&gt;提取-&gt;存储，但Python里面的3方包等工具还是相对健全很多，如BeautifulSoup就十分好用。<br><a id="more"></a></p>
<hr>
<h2 id="简单爬虫"><a href="#简单爬虫" class="headerlink" title="简单爬虫"></a>简单爬虫</h2><p>写的尽量简单点，用到re，BeautifulSoup，urllib2等模块。不包含URL管理器等。</p>
<h3 id="博客页面分析"><a href="#博客页面分析" class="headerlink" title="博客页面分析"></a>博客页面分析</h3><p>以抓取本博客<a href="http://blog.xigulu.com/">http://blog.xigulu.com/</a>为例。提取出首页标题及摘要内容，最后将提取的内容写入html。</p>
<p>审查网页源码，可以发现：<br>标题部分：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"post-title"</span> <span class="attr">itemprop</span>=<span class="string">"name headline"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"post-title-link"</span> <span class="attr">href</span>=<span class="string">"/2016/05/12/php_route_url_pretty/"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></div><div class="line">        PHP单一入口模式及URL路由美化</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>摘要部分：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-body"</span> <span class="attr">itemprop</span>=<span class="string">"articleBody"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>大部分PHP框架都是基于单一入口模式，如yii，ci，slim等框架中都有实现，且配置都非常简单。最近想把自己以前写的一个零散的项目整理成单一入口模式，于是研究了下，实现了基本可用的功能。包括URL路由，美化功能。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-more-link text-center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"/2016/05/12/php_route_url_pretty/#more"</span> <span class="attr">rel</span>=<span class="string">"contents"</span>&gt;</span></div><div class="line">              阅读全文 »</div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>爬取过程：</p>
<ul>
<li>先使用urllib2下载网页</li>
<li>分析下载的网页，使用BeautifulSoup + 正则 提取想要的内容</li>
<li>输出html</li>
</ul>
<h3 id="爬取并显示"><a href="#爬取并显示" class="headerlink" title="爬取并显示"></a>爬取并显示</h3><p>主要代码如下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="comment">#抓取http://blog.xigulu.com/首页的标题及摘要内容</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> bs4</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span>:</span></div><div class="line">    <span class="comment">#下载html</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_html</span><span class="params">(self,url)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"start download_html:"</span></div><div class="line">        response = urllib2.urlopen(url)</div><div class="line">        <span class="keyword">if</span> response.getcode() != <span class="number">200</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"finish download_html!"</span></div><div class="line">        <span class="keyword">return</span> response.read()</div><div class="line">    </div><div class="line">    <span class="comment">#解析html</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parser_html</span><span class="params">(self,html_str)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"start parser_html:"</span></div><div class="line">        result_list = []  <span class="comment">#结果存放到list中, list元素为字典</span></div><div class="line">        soup = BeautifulSoup(html_str, <span class="string">"html.parser"</span>, from_encoding=<span class="string">"utf-8"</span>)</div><div class="line">        </div><div class="line">        <span class="string">'''</span></div><div class="line">        &lt;h1 class="post-title" itemprop="name headline"&gt;</div><div class="line">            &lt;a class="post-title-link" href="/2016/05/12/php_route_url_pretty/" itemprop="url"&gt;</div><div class="line">                PHP单一入口模式及URL路由美化</div><div class="line">            &lt;/a&gt;</div><div class="line">        &lt;/h1&gt;</div><div class="line">        '''</div><div class="line">        <span class="comment">#title_nodes = soup.find_all('a', class_="post-title-link")</span></div><div class="line">        title_nodes = soup.select(<span class="string">"h1.post-title a.post-title-link"</span>)</div><div class="line">        </div><div class="line">        <span class="string">'''</span></div><div class="line">        &lt;div class="post-body" itemprop="articleBody"&gt;</div><div class="line">          &lt;p&gt;大部分PHP框架都是基于单一入口模式，如yii，ci，slim等框架中都有实现，且配置都非常简单。最近想把自己以前写的一个零散的项目整理成单一入口模式，于是研究了下，实现了基本可用的功能。包括URL路由，美化功能。&lt;/p&gt;</div><div class="line">          &lt;div class="post-more-link text-center"&gt;</div><div class="line">            &lt;a class="btn" href="/2016/05/12/php_route_url_pretty/#more" rel="contents"&gt;</div><div class="line">                            阅读全文 »</div><div class="line">            &lt;/a&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        '''</div><div class="line">        <span class="comment">#summary_nodes = soup.find_all('div', class_="post-body")</span></div><div class="line">        summary_nodes = soup.select(<span class="string">"div.post-body p"</span>)   <span class="comment">#这里通过select来操作, 比find方法更好</span></div><div class="line">        <span class="comment">#下载的html中, 几个p标签未闭合. 导致带上了" 阅读全文 »"</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(title_nodes)):</div><div class="line">            result_data = &#123;&#125;</div><div class="line">            result_data[<span class="string">'title'</span>] = title_nodes[index].get_text() </div><div class="line">            result_data[<span class="string">'summary'</span>] = summary_nodes[index].get_text()</div><div class="line">            <span class="comment">#result_data['summary'] = summary_nodes[index].find('p').get_text()</span></div><div class="line">            result_list.append(result_data)</div><div class="line">        </div><div class="line">        <span class="keyword">print</span> <span class="string">"finish parser_html!"</span></div><div class="line">        <span class="keyword">return</span> result_list</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="comment">#结果存为htnl展示</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save2html</span><span class="params">(self,list_data)</span>:</span></div><div class="line">        out_html = open(<span class="string">'output.html'</span>, <span class="string">'w'</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"start save2html:"</span></div><div class="line">        out_html.write(<span class="string">"&lt;html&gt;"</span>)</div><div class="line">        out_html.write(<span class="string">"&lt;table style='border:1px solid #000'&gt;"</span>)</div><div class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> list_data:</div><div class="line">            out_html.write(<span class="string">"&lt;tr&gt;"</span>)</div><div class="line">            out_html.write(<span class="string">"&lt;td style='border:1px solid #000'&gt;%s&lt;/td&gt;"</span> % data[<span class="string">'title'</span>].encode(<span class="string">'utf8'</span>))</div><div class="line">            out_html.write(<span class="string">"&lt;td style='border:1px solid #000'&gt;%s&lt;/td&gt;"</span> % data[<span class="string">'summary'</span>].encode(<span class="string">'utf8'</span>))</div><div class="line">            out_html.write(<span class="string">"&lt;/tr&gt;"</span>)</div><div class="line">        out_html.write(<span class="string">"&lt;/table&gt;"</span>)</div><div class="line">        out_html.write(<span class="string">"&lt;/html&gt;"</span>)</div><div class="line">        out_html.close()</div><div class="line">        <span class="keyword">print</span> <span class="string">"finish save2html!"</span></div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">#测试</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    </div><div class="line">    mysapider = MySpider()</div><div class="line">    </div><div class="line">    url = <span class="string">"http://blog.xigulu.com/"</span></div><div class="line">    html_str = mysapider.download_html(url)</div><div class="line">    <span class="comment">#print html_str</span></div><div class="line">    list_data = mysapider.parser_html(html_str)</div><div class="line">    mysapider.save2html(list_data)</div></pre></td></tr></table></figure></p>
<p>说明见注释。</p>
<h2 id="调试类"><a href="#调试类" class="headerlink" title="调试类"></a>调试类</h2><p>出于经常需要调试与输出数据，于是写了个简单的调试类。（复杂一点的还是用PyDev或PyCharm集成开发环境调试更好）</p>
<p>直接贴代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">from</span> ipdb <span class="keyword">import</span> set_trace</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XNDebug</span>:</span></div><div class="line">    <span class="comment">#is 与  == 的区别就是is根据id, ==根据值 判断.</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.debugStatus = <span class="keyword">True</span>  <span class="comment">#False</span></div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">#打印list</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logList</span><span class="params">(self,varlist)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.debugStatus != <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> varlist <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> varlist:</div><div class="line">            <span class="keyword">print</span> <span class="string">"logList--&gt; is None"</span></div><div class="line">        <span class="keyword">elif</span> type(varlist) == list:</div><div class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(len(varlist)):</div><div class="line">                <span class="keyword">print</span> <span class="string">"logList[%d]--&gt;%s"</span>%(index,varlist[index])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"logList--&gt; not list type!"</span></div><div class="line">        </div><div class="line">                </div><div class="line">    <span class="comment">#打印字典</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logDict</span><span class="params">(self,varDict)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.debugStatus != <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> varDict <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> varDict:</div><div class="line">            <span class="keyword">print</span> <span class="string">"varDict--&gt; is None"</span></div><div class="line">        <span class="keyword">elif</span> type(varDict) == dict:</div><div class="line">            <span class="keyword">for</span> (k, v) <span class="keyword">in</span> varDict.items():</div><div class="line">                <span class="keyword">print</span> <span class="string">'logDict-&gt;%s:%s !'</span> % (k, v)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"logDict--&gt; not dict type!"</span></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">#打印set (不重复, 无序的. 只是这个无序, 没必要标号)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logSet</span><span class="params">(self,varSet)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.debugStatus != <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> varSet <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> varSet:</div><div class="line">            <span class="keyword">print</span> <span class="string">"varSet--&gt; is None"</span></div><div class="line">        <span class="keyword">elif</span> type(varSet) == set:</div><div class="line">            <span class="keyword">for</span> setItem <span class="keyword">in</span> varSet:</div><div class="line">                <span class="keyword">print</span> <span class="string">"varSet--&gt;"</span>,setItem</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"varSet--&gt; not set type!"</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">#写入到html文件(存长文本 )</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save2html</span><span class="params">(self,varParam)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.debugStatus != <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> varParam <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> varParam:</div><div class="line">            <span class="keyword">print</span> <span class="string">"save2html:varParam--&gt; is None"</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        </div><div class="line">        <span class="comment">#写入html</span></div><div class="line">        out_html = open(<span class="string">'out.html'</span>, <span class="string">'w'</span>)</div><div class="line">        out_html.write(<span class="string">"&lt;html&gt;"</span>)</div><div class="line">        out_html.write(<span class="string">"&lt;body&gt;"</span>)</div><div class="line">        out_html.write(<span class="string">"%s"</span> % varParam.encode(<span class="string">'utf8'</span>))</div><div class="line">        out_html.write(<span class="string">"&lt;/body&gt;"</span>)</div><div class="line">        out_html.write(<span class="string">"&lt;/html&gt;"</span>)</div><div class="line">        out_html.close()</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">#在该地方使用ipdb调试. (使用"p 变量名"可以查看变量的值, n执行下一行)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug_ipdb</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.debugStatus != <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        set_trace()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#测试</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    xndebugObj = XNDebug()</div><div class="line">    </div><div class="line">    mylist = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</div><div class="line">    xndebugObj.logList(mylist)</div><div class="line">    </div><div class="line">    mydict = &#123;&#125;</div><div class="line">    mydict1 = &#123;<span class="string">'a'</span>:<span class="number">123</span>,<span class="string">'b'</span>:<span class="string">'sss'</span>&#125;</div><div class="line">    xndebugObj.logDict(mydict1)</div><div class="line">    </div><div class="line">    <span class="comment">#存长文本</span></div><div class="line">    testStr= <span class="string">"write this string"</span></div><div class="line">    xndebugObj.save2html(testStr)</div><div class="line">    </div><div class="line">    xndebugObj.debug_ipdb()</div><div class="line">    </div><div class="line">    myset = set(<span class="string">'http'</span>)  <span class="comment">#初始化时为拆分成单个元素</span></div><div class="line">    abc = <span class="string">"12133333"</span>     <span class="comment">#这样是作为一个整体的</span></div><div class="line">    myset.add(abc)</div><div class="line">    xndebugObj.logSet(myset)</div></pre></td></tr></table></figure></p>
<p>其中debug_ipdb方法中使用了ipdb调试，直接在控制台运行，十分方便。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上使用的beautifulsoup4，ipdb为第三库，安装使用“pip install xxx”即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想抓一点其他网站的内容，但是用PHP做感觉有点奇怪，单纯用正则表达式也比较不便。于是狠补了下Python的内容，虽然基本原理都是下载-&amp;gt;分析-&amp;gt;提取-&amp;gt;存储，但Python里面的3方包等工具还是相对健全很多，如BeautifulSoup就十分好用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.xigulu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PHP单一入口模式及URL路由美化</title>
    <link href="http://blog.xigulu.com/2016/05/12/php_route_url_pretty/"/>
    <id>http://blog.xigulu.com/2016/05/12/php_route_url_pretty/</id>
    <published>2016-05-11T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>大部分PHP框架都是基于单一入口模式，如Laravel，yii，ci，tp等，且配置都非常简单。最近想把自己以前写的一个零散的项目(全是单文件模式)整理成单一入口模式，于是研究了下，实现了基本可用的功能。包括URL路由，美化功能。</p>
<a id="more"></a>
<hr>
<h2 id="PHP中的单一入口模式"><a href="#PHP中的单一入口模式" class="headerlink" title="PHP中的单一入口模式"></a>PHP中的单一入口模式</h2><p>所谓单一入口，就是所有的http请求都通过一个文件来处理后，再交给各个对应php文件处理。单一入口的好处很明显，防止暴露给外界更多的信息，且可以很方便的记录请求，安全性检查。在入口里，我们还可以对url参数和post进行必要的检查和特殊字符过滤、记录日志、访问统计等等各种可以集中处理的任务。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>可能首先想到的实现是一堆if else、或者一堆switch case。这是最简单的实现， 但这种太麻烦。<br>其实可以更加简单。<br>假设项目分为各个模块，每个模块对应一个文件夹。文件夹里面存放的是各个php文件。<br>实现代码如下index.php。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$url = isset($_GET['url'])? $_GET['url']:'';  //目录</div><div class="line">$action = isset($_GET['action'])? $_GET['action']:'';  //文件</div><div class="line"></div><div class="line">$filePath = $url.'/'.$action.'.php';</div><div class="line"></div><div class="line">if(file_exists($filePath))&#123;</div><div class="line">	include($filePath);//包含就会直接调用</div><div class="line">&#125;else&#123;</div><div class="line">	header('HTTP/1.1 404 Not Found'); </div><div class="line">	header('status: 404 Not Found');</div><div class="line">	include("errors/404.html");//跳转到404页面</div><div class="line">	exit(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中url对应模块目录，action对应文件名，拼接之后直接include即可。<br>那么访问<strong>news/abc.php?id=1</strong>（news目录下有个abc.php，需要传id参数）的形式就变为<strong>index.php?url=news&amp;action=abc&amp;id=1</strong>的形式了。</p>
<p>而且旧代码也不用动，只是参数变多了。</p>
<h2 id="URL路由与美化"><a href="#URL路由与美化" class="headerlink" title="URL路由与美化"></a>URL路由与美化</h2><p>上面单一入口访问的URL无疑看起来很难看，离我们平日里见到的网站URL相差十万八千里。接下来写美化URL。<br>以apache服务器为例。如果要重新定义URL需要开启apache 的 mod_rewrite 模块。<br>步骤如下：</p>
<blockquote>
<p>1.开启 apache的mod_rewrite模块</p>
<blockquote>
<p>1.1 找到apache的配置文件httpd.conf；<br>1.2 去掉LoadModule rewrite_module modules/mod_rewrite.so前的“#”符号；<br>1.3 查找httpd.conf文件, 把 AllowOverride None 修改为 AllowOverride All；</p>
</blockquote>
<p>2.编写.htaccess文件中的URL美化规则</p>
</blockquote>
<h3 id="htaccess文件编写规则"><a href="#htaccess文件编写规则" class="headerlink" title=".htaccess文件编写规则"></a>.htaccess文件编写规则</h3><p>注意: .htaccess文件创建在index.php入口文件同级目录即可。（windows上创建时，输入”.htaccess.”，最后多加一个点号）</p>
<p>如下一条规则:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line"><span class="meta">#RewriteRule ^([a-zA-Z0-9_-]+)/([0-9]+)$ index.php?action=$1&amp;id=$2</span></div></pre></td></tr></table></figure></p>
<p>意思是当访问<strong>xxxx/index.php?action=abc&amp;id=123</strong>时，将地址变为<strong>xxxx/abc/123</strong>的形式。<br>这样既去掉了index.php，也简化了参数样式。<br>前半部分中，^号表示开始符号，$表示结束符号。<br>([a-zA-Z0-9_-]+)括号中是正则表达式，第一个括号中的内容与后面的$1对应， 第二个括号中的内容与$2对应。<br>而且还可以直接在后面加.html做成伪静态页面。(\.表示转义)<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line"><span class="meta">#RewriteRule ^([a-zA-Z0-9_-]+)/([0-9]+)\.html$ index.php?action=$1&amp;id=$2</span></div></pre></td></tr></table></figure></p>
<p>最后访问<strong>xxxx/abc/123.html</strong>即可。</p>
<p>.htaccess文件中还可以设置重定向，404页面等。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在入口文件index.php中可以加一些统计信息等。但不能加过多，因为每次请求都会调用这个文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大部分PHP框架都是基于单一入口模式，如Laravel，yii，ci，tp等，且配置都非常简单。最近想把自己以前写的一个零散的项目(全是单文件模式)整理成单一入口模式，于是研究了下，实现了基本可用的功能。包括URL路由，美化功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://blog.xigulu.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>用LESS、SASS语言编写CSS</title>
    <link href="http://blog.xigulu.com/2016/04/24/CSS_LESS_SASS/"/>
    <id>http://blog.xigulu.com/2016/04/24/CSS_LESS_SASS/</id>
    <published>2016-04-23T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近花时间研究了下LESS与SASS。这两种语言主要是为了简化CSS的编写，引入了变量，运算，函数等。SASS比LESS强大一些，支持if、else等。两种语言基本写法还是与CSS类似，简单也很好理解。Bootstrap框架的css文件就是用LESS来编写的(不过Bootstrap4.0改为SASS编写了)。<br><a id="more"></a></p>
<hr>
<h2 id="LESS"><a href="#LESS" class="headerlink" title="LESS"></a>LESS</h2><p><a href="http://lesscss.org/" target="_blank" rel="external">less官网</a><br><a href="http://lesscss.cn/" target="_blank" rel="external">http://lesscss.cn/</a><br><a href="http://www.1024i.com/demo/less/" target="_blank" rel="external">http://www.1024i.com/demo/less/</a></p>
<h3 id="一些LESS-SASS相关工具"><a href="#一些LESS-SASS相关工具" class="headerlink" title="一些LESS/SASS相关工具"></a>一些LESS/SASS相关工具</h3><p>要编译less需要lessc工具。在sublime编辑器上可以下载less、lessc插件，保存的时候自动编译css文件。(推荐只下语法高亮即可, 用以下工具进行编译)</p>
<p>windows上用<a href="http://koala-app.com/index-zh.html" target="_blank" rel="external">koala</a>编译即可（国人开发）。<br>mac上也可以用koala，还可以用Codekit。<br>使用方式都是拖动包含less/sass/scss文件即可。设置为自动编译后，保存时即可自动编译出css文件。</p>
<h2 id="LESS的基本语法"><a href="#LESS的基本语法" class="headerlink" title="LESS的基本语法"></a>LESS的基本语法</h2><p>引入其他less文件用法：</p>
<blockquote>
<p>@import “common.less”;   //导入其他less文件, 可以省略.less</p>
</blockquote>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明变量</span></div><div class="line"><span class="variable">@test_width:</span><span class="number">300px</span>;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="variable">@test_width</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="variable">@test_width</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><p>就是声明一段代码后其他地方可以直接引用<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border</span>&#123;</div><div class="line">    <span class="attribute">border</span>: solid <span class="number">5px</span> palevioletred;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//混合, 可带参数(带默认参数)</span></div><div class="line"><span class="selector-class">.border_02</span>(<span class="variable">@param1</span>:<span class="number">2px</span>)&#123;</div><div class="line">    <span class="attribute">border</span>: solid <span class="variable">@param1</span> yellow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="selector-class">.border</span>;  <span class="comment">//混合. 直接将border插入到这里</span></div><div class="line">	<span class="selector-class">.border_02</span>(<span class="number">10px</span> + <span class="number">10</span>);  <span class="comment">//能运算</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>根据传入的参数自动匹配。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//匹配模式========================================</span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="selector-class">.triangle</span>(top,<span class="number">100px</span>);</div><div class="line">    <span class="comment">//.triangle(bottom,100px);</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//这个都会加载</span></div><div class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>,<span class="variable">@width</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.triangle</span>(top,<span class="variable">@width</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</div><div class="line">    <span class="attribute">border-width</span>: <span class="variable">@width</span>;</div><div class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="variable">@color</span> transparent;</div><div class="line">    <span class="attribute">border-style</span>: dashed dashed solid dashed; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.triangle</span>(bottom,<span class="variable">@width</span>:<span class="number">5px</span>,<span class="variable">@color</span>:<span class="number">#ccc</span>)&#123;</div><div class="line">    <span class="attribute">border-width</span>: <span class="variable">@width</span>;</div><div class="line">    <span class="attribute">border-color</span>: <span class="variable">@color</span> transparent  transparent  transparent;</div><div class="line">    <span class="attribute">border-style</span>: solid dashed dashed dashed; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>这个应该是看起来最直观，最好用的了。就是直接根据包含关系写css。不用再一层层选择。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//嵌套(简化css中的嵌套)===============================</span></div><div class="line"><span class="comment">//.list li&#123;&#125;</span></div><div class="line"><span class="comment">//.list a&#123;&#125;</span></div><div class="line"></div><div class="line"><span class="selector-class">.list</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> auto;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">    </div><div class="line">    <span class="selector-tag">li</span>&#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</div><div class="line">        <span class="attribute">background</span>: yellow;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span>&#123;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        </div><div class="line">        <span class="comment">//hover属性</span></div><div class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">            <span class="attribute">color</span>: red;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上几个都是最常用也是最好用的功能，更多的语法可以参见官网。</p>
<hr>
<h2 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h2><p><a href="http://sass-lang.com/" target="_blank" rel="external">sass官网</a><br><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">http://www.w3cplus.com/sassguide/</a><br><a href="http://sass.bootcss.com/" target="_blank" rel="external">http://sass.bootcss.com/</a></p>
<p>编译sass的工具推荐还是Koala与Codekit，里面都有集成。</p>
<h3 id="sass与scss文件的最大差别"><a href="#sass与scss文件的最大差别" class="headerlink" title="sass与scss文件的最大差别"></a>sass与scss文件的最大差别</h3><blockquote>
<p>sass不带花括号{} 与分号;<br>scss带花括号{} 与分号等;</p>
</blockquote>
<p>两者都是sass语言，只是scss为新语法，且更加常规易懂。所以推荐使用scss文件进行编写，以下都是用scss的格式进行编写的。</p>
<h2 id="SASS的基本语法"><a href="#SASS的基本语法" class="headerlink" title="SASS的基本语法"></a>SASS的基本语法</h2><p>引入其他文件用法：</p>
<blockquote>
<p>@import “a.css”;</p>
</blockquote>
<h3 id="变量与默认值"><a href="#变量与默认值" class="headerlink" title="变量与默认值"></a>变量与默认值</h3><p>变量还有多值变量list，map等。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$blue</span>:<span class="number">#aaa</span>;</div><div class="line"><span class="comment">//list类型。可用nth($var,$index)取值。</span></div><div class="line"><span class="variable">$mylist</span>: <span class="number">6px</span> <span class="number">10px</span> <span class="number">100px</span>;</div><div class="line"><span class="comment">//map类型。可通过map-get($map,$key)取值。</span></div><div class="line"><span class="variable">$mymap</span>: (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>);</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">$blue</span>;</div><div class="line">    <span class="attribute">width</span>: nth(<span class="variable">$mylist</span>,<span class="number">1</span>);  <span class="comment">//第一个开始</span></div><div class="line">    <span class="attribute">height</span>: map-get(<span class="variable">$mymap</span>,h1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//&gt;默认值.  后面加上!default即可</span></div><div class="line"><span class="variable">$baseLineHeight</span>: <span class="number">2</span>;</div><div class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span> !default;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="variable">$baseLineHeight</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#FF3366</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//class2继承class1</span></div><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">    @<span class="keyword">extend</span> .class1;</div><div class="line">    <span class="attribute">font</span>: arial;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3><p>类似于C语言中的宏定义, 可重用的代码块.<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> myleft(<span class="variable">$value</span>)&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">height</span>: <span class="variable">$value</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    @<span class="keyword">include</span> myleft(<span class="number">100px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//8.条件语句</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  @<span class="keyword">if</span> 1 + 1 == 2 &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid;  &#125;</div><div class="line">  @<span class="keyword">if</span> 5 &lt; 3      &#123; <span class="attribute">border</span>: <span class="number">2px</span> dotted; &#125;</div><div class="line">  @<span class="keyword">if</span> null       &#123; <span class="attribute">border</span>: <span class="number">3px</span> double; &#125;</div><div class="line">  </div><div class="line">  @<span class="keyword">if</span> 1&gt;<span class="number">2</span> &#123;</div><div class="line">      </div><div class="line">  &#125; @<span class="keyword">else</span> if 1 == 1 &#123;</div><div class="line">      </div><div class="line">  &#125; @<span class="keyword">else</span> &#123;</div><div class="line">      </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="循环for-while-each"><a href="#循环for-while-each" class="headerlink" title="循环for / while / each"></a>循环for / while / each</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 10 &#123;</div><div class="line">    <span class="selector-tag">p</span>&#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">10px</span>+<span class="variable">$i</span> solid <span class="number">#FF0000</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$i</span>: <span class="number">6</span>;</div><div class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</div><div class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</div><div class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</div><div class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符串-占位符"><a href="#字符串-占位符" class="headerlink" title="字符串 / 占位符"></a>字符串 / 占位符</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串. +号连接. 颜色也可以相加相乘.</span></div><div class="line"><span class="selector-tag">p</span>:before &#123;</div><div class="line">  <span class="attribute">font-family</span>: sans- + <span class="string">"serif"</span>;  <span class="comment">//最后输出sans-serif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//占位符%</span></div><div class="line"><span class="comment">//abc只是占着地方预留. 只有当使用extend后才调用</span></div><div class="line">%abc &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    @<span class="keyword">extend</span> %abc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="嵌套-1"><a href="#嵌套-1" class="headerlink" title="嵌套"></a>嵌套</h3><p>与less中的一样<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="selector-tag">ul</span>&#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>LESS 与 SASS的语法相差不大，其实LESS基本够用，但SASS中有多种类型的变量，循环，条件语句等，相比更加强大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近花时间研究了下LESS与SASS。这两种语言主要是为了简化CSS的编写，引入了变量，运算，函数等。SASS比LESS强大一些，支持if、else等。两种语言基本写法还是与CSS类似，简单也很好理解。Bootstrap框架的css文件就是用LESS来编写的(不过Bootstrap4.0改为SASS编写了)。&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.xigulu.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>编写jQuery插件</title>
    <link href="http://blog.xigulu.com/2016/04/15/JQuery_plus_in/"/>
    <id>http://blog.xigulu.com/2016/04/15/JQuery_plus_in/</id>
    <published>2016-04-14T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery插件分为类级与对象级，前者基本不用。本文主要实现一个导航页，并将调用封装成jQuery插件形式，可以配置事件，CSS，及支持jQuery链式操作等。<br>找插件的几个网站推荐<a href="http://plugins.jquery.com/" target="_blank" rel="external">plugins.jquery.com</a>，<a href="http://www.jq22.com/" target="_blank" rel="external">www.jq22.com</a> ，<a href="http://www.htmleaf.com/" target="_blank" rel="external">www.htmleaf.com</a>。</p>
<a id="more"></a>
<hr>
<h2 id="类级别插件"><a href="#类级别插件" class="headerlink" title="类级别插件"></a>类级别插件</h2><p>类级别插件就是给jQuery添加静态方法。有以下3种方法。</p>
<ul>
<li>添加全局函数</li>
<li>使用$.extend()</li>
<li>使用命名空间</li>
</ul>
<p>插件开发中基本不用这种方式。</p>
<h3 id="添加全局函数"><a href="#添加全局函数" class="headerlink" title="添加全局函数"></a>添加全局函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.myAlert = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    alert(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-extend"><a href="#使用-extend" class="headerlink" title="使用$.extend()"></a>使用$.extend()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jQuery.extend(&#123;</div><div class="line">   myAlert:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">       alert(str);</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>以上2种的调用方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.myAlert(<span class="string">"哈哈哈!"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h3><p>xnspace为自己取的名字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jQuery.xnspace = &#123;</div><div class="line">    myAlert:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">        alert(str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.xnspace.myAlert(<span class="string">"哦哦哦!"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="支持链式操作"><a href="#支持链式操作" class="headerlink" title="支持链式操作"></a>支持链式操作</h3><p>以添加全局函数为例，可以这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jQuery.myAppend = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    obj.append(<span class="string">"test"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只要返回传入的对象即可。调用形如: </p>
<blockquote>
<p>$.myAppend(“#some_id”).text() ;</p>
</blockquote>
<h2 id="对象级别插件"><a href="#对象级别插件" class="headerlink" title="对象级别插件"></a>对象级别插件</h2><p>对象级就是对jQuery对象而非直接给jQuery添加静态方法。</p>
<h3 id="插件开发基本模版"><a href="#插件开发基本模版" class="headerlink" title="插件开发基本模版"></a>插件开发基本模版</h3><p>然后有一个基本的模版：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    $.fn.your_plusin_name = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> defaults = &#123;</div><div class="line">            <span class="comment">//各种参数设置</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        options = $.extend(defaults, options);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//实现各种功能的代码</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">//支持链式操作</span></div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<h2 id="一个导航插件实例"><a href="#一个导航插件实例" class="headerlink" title="一个导航插件实例"></a>一个导航插件实例</h2><p>基本的HTML与CSS布局，下面是实现一个导航。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jquery-2.2.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-NavDemo-1.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /*清除li默认间距*/</div><div class="line">    *&#123;</div><div class="line">        padding: 0px;</div><div class="line">        margin: 0px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .myTabNav&#123;</div><div class="line">        list-style-type: none; /*列表圆点去掉*/</div><div class="line">    &#125;</div><div class="line">    .myTabNav li&#123;</div><div class="line">        float: left;</div><div class="line">        width: 150px;</div><div class="line">        height: 30px;</div><div class="line">        line-height: 30px;  /*整行*/</div><div class="line">        text-align: center;</div><div class="line">        border: 1px solid darkorchid;</div><div class="line">        border-bottom: none;</div><div class="line">        cursor: pointer; /*手形*/</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    .myTabNav li.current&#123;</div><div class="line">        background: orange;</div><div class="line">        color: #0099ff;</div><div class="line">        font-weight: 700;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .myTabNavContent&#123;</div><div class="line">        clear: both; /*显示第一个*/</div><div class="line">    &#125;</div><div class="line">    .myTabNavContent div&#123;</div><div class="line">        border: 1px solid indigo;</div><div class="line">        width: 453px;/**151*3*/</div><div class="line">        height: 300px;</div><div class="line">        display: none;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   		<span class="comment">//调用插件</span></div><div class="line">        $(<span class="string">".myTab"</span>).myNavPlusin(&#123;</div><div class="line">            currentClass:<span class="string">'current'</span>,</div><div class="line">            nav:<span class="string">'.myTabNav&gt;li'</span>,</div><div class="line">            navContent:<span class="string">'.myTabNavContent&gt;div'</span>,</div><div class="line">            eventType:<span class="string">'mouseover'</span></div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//&#125;).find(".myTabNav&gt;li").css("background","yellow");  //链式操作</span></div><div class="line"></div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myTab"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"myTabNav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myTabNavContent"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: block"</span>&gt;</span>这是主页的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是下载页的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是关于页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>做成插件形式，命名jquery-NavDemo-1.0.js。<br>然后将JavaScript代码封装到js文件中，只需在html文件中引入，作简单配置即可实现功能。</p>
<p>html中调用的js框架部分代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   		<span class="comment">//调用插件. 不设置参数的话, 会用默认参数.</span></div><div class="line">        $(<span class="string">".myTab"</span>).myNavPlusin(&#123;</div><div class="line">            currentClass:<span class="string">'current'</span>,</div><div class="line">            nav:<span class="string">'.myTabNav&gt;li'</span>,</div><div class="line">            navContent:<span class="string">'.myTabNavContent&gt;div'</span>,</div><div class="line">            eventType:<span class="string">'mouseover'</span></div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//&#125;).find(".myTabNav&gt;li").css("background","yellow");  //链式操作</span></div><div class="line"></div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>jquery-TableDemo-1.0.js中的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    $.fn.myNavPlusin = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> defaults = &#123;</div><div class="line">            <span class="comment">//各种可以自定义的参数</span></div><div class="line">            currentClass:<span class="string">'current'</span>,</div><div class="line">            nav:<span class="string">'.myTabNav&gt;li'</span>,</div><div class="line">            navContent:<span class="string">'.myTabNavContent&gt;div'</span>,</div><div class="line">            eventType:<span class="string">'click'</span>,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        options = $.extend(defaults, options);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//实现各种功能的代码</span></div><div class="line">            <span class="keyword">var</span> _this = $(<span class="keyword">this</span>);</div><div class="line">            _this.find(options.nav).bind(options.eventType,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//为找到的添加currentClass, 并移除所有同胞子元素的currentClass</span></div><div class="line">                $(<span class="keyword">this</span>).addClass(options.currentClass).siblings().removeClass(options.currentClass);</div><div class="line"></div><div class="line">                <span class="comment">//nav的content设置: 找到当前点击的显示, 并且隐藏同胞子元素.</span></div><div class="line">                <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index();</div><div class="line">                _this.find(options.navContent).eq(index).show().siblings().hide();</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;  <span class="comment">//支持链式操作</span></div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在使用别人的jQuery插件时，会发现也是这种调用与配置方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery插件分为类级与对象级，前者基本不用。本文主要实现一个导航页，并将调用封装成jQuery插件形式，可以配置事件，CSS，及支持jQuery链式操作等。&lt;br&gt;找插件的几个网站推荐&lt;a href=&quot;http://plugins.jquery.com/&quot;&gt;plugins.jquery.com&lt;/a&gt;，&lt;a href=&quot;http://www.jq22.com/&quot;&gt;www.jq22.com&lt;/a&gt; ，&lt;a href=&quot;http://www.htmleaf.com/&quot;&gt;www.htmleaf.com&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jQuery" scheme="http://blog.xigulu.com/tags/jQuery/"/>
    
      <category term="插件" scheme="http://blog.xigulu.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JSONP处理跨域请求及WEB中JSON处理</title>
    <link href="http://blog.xigulu.com/2016/04/09/JQuery_JS_JSON_JSONP_data/"/>
    <id>http://blog.xigulu.com/2016/04/09/JQuery_JS_JSON_JSONP_data/</id>
    <published>2016-04-08T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ajax中默认是不允许跨域访问的，意思就是Ajax不能请求其他服务器的数据。用jsonp（json with padding，翻译是填充式json，参数式json）可以间接解决跨域问题。因为WEB端也经常需要处理JSON数据，记录一下WEB端接收JSON后的一些处理方法。</p>
<a id="more"></a>
<hr>
<h2 id="getJSON处理跨域方法"><a href="#getJSON处理跨域方法" class="headerlink" title="getJSON处理跨域方法"></a>getJSON处理跨域方法</h2><p>JQuery封装的Ajax方法很好用，直接用getJSON来实现跨域比较直观，用的就是JSONP。</p>
<h3 id="WEB端代码-只能get"><a href="#WEB端代码-只能get" class="headerlink" title="WEB端代码(只能get)"></a>WEB端代码(只能get)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>getJSON测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../JQuery/jquery-2.2.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">    $(document).ready(function()&#123;</div><div class="line"></div><div class="line">        //本服务器</div><div class="line">        $("#btn1").click(function()&#123;</div><div class="line">            $.getJSON("server.php", function (data) &#123;</div><div class="line">                alert(data);</div><div class="line">                alert(data.name); //获取name</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        //其他服务器： 跨域.</div><div class="line">        $("#btn2").click(function()&#123;</div><div class="line">            var url ="http://localhost:8088/server.php?jsoncallback=?";</div><div class="line">            $.getJSON(url,function(data)&#123;</div><div class="line">                alert(data.name+"\n"+data.age);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>getJSON本服务器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>getJSON跨域服务器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>本地开2个服务器，另一个端口设为8088。<br>跨域访问要求格式：<br><strong>xx.php?参数名=?</strong></p>
<p>对应的服务器端输出json格式(带括号):<br><strong>参数名对应值 (json数据)</strong></p>
<h3 id="对应服务器端代码"><a href="#对应服务器端代码" class="headerlink" title="对应服务器端代码:"></a>对应服务器端代码:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"xuneng"</span>,<span class="string">"age"</span>=&gt;<span class="string">"12"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'jsoncallback'</span>]))&#123;</div><div class="line">	<span class="comment">//跨域</span></div><div class="line">    <span class="keyword">echo</span> $_GET[<span class="string">'jsoncallback'</span>].<span class="string">"("</span>.json_encode($arr).<span class="string">")"</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> json_encode($arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="JS中JSON数据处理方法"><a href="#JS中JSON数据处理方法" class="headerlink" title="JS中JSON数据处理方法"></a>JS中JSON数据处理方法</h2><h3 id="JSON-gt-字符串"><a href="#JSON-gt-字符串" class="headerlink" title="JSON ==&gt; 字符串"></a>JSON ==&gt; 字符串</h3><ul>
<li>方法：<strong>eval</strong><br>var jsonObj = eval(‘(‘ + str + ‘)’);<br>JSON中引号可以单双通用，这个最常用。</li>
<li>方法：<strong>parseJSON</strong><br>jQuery.parseJSON(str);<br>只支持标准JSON</li>
<li>方法：<strong>parse</strong><br>JSON.parse(str);<br>只支持标准JSON</li>
</ul>
<h3 id="字符串-gt-JSON"><a href="#字符串-gt-JSON" class="headerlink" title="字符串 ==&gt; JSON"></a>字符串 ==&gt; JSON</h3><ul>
<li>方法：<strong>toJSONString</strong><br>obj.toJSONString()<br>JSON中引号可以单双通用，这个最常用。</li>
<li>方法：<strong>stringify</strong><br>JSON.stringify(obj);</li>
</ul>
<h3 id="JSON读取与遍历"><a href="#JSON读取与遍历" class="headerlink" title="JSON读取与遍历"></a>JSON读取与遍历</h3><p>用点号，下标进行读取。</p>
<p>直接上一段综合代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jquery-2.2.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">        $(function () &#123;</div><div class="line"></div><div class="line">            $("#myBtn1").click(function () &#123;</div><div class="line">                //字符串==&gt;JSON</div><div class="line">                var str = '&#123; "username": "John" &#125;';  //能解析json, 引号单双无所谓.</div><div class="line">                var jsonObj = eval('(' + str + ')');</div><div class="line">                alert(jsonObj.username);</div><div class="line">                /*</div><div class="line">                 这两者只支持标准的JSON格式</div><div class="line">                 jQuery.parseJSON(str)</div><div class="line">                 JSON.parse(str);</div><div class="line">                 要解析跟不标准的JSON, 可以用JQuery扩展.</div><div class="line">                 */</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            $("#myBtn2").click(function () &#123;</div><div class="line">                //JSON==&gt;字符串</div><div class="line">                //obj.toJSONString();</div><div class="line">                //或者JSON.stringify(obj);</div><div class="line">                var jsonObj = &#123;"username": "Tim"&#125;;  //这就是JSON</div><div class="line">                alert(jsonObj.username);</div><div class="line">                alert(jsonObj.toString());</div><div class="line">                alert(JSON.stringify(jsonObj));</div><div class="line"></div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            $("#myBtn3").click(function () &#123;</div><div class="line">                //JSON读取</div><div class="line">                var jsonObj = &#123;</div><div class="line">                    root: [&#123;'name': '6200', 'value': '0'&#125;, &#123;'name': '6101', 'value': 'xa'&#125;, &#123;</div><div class="line">                        'name': '6102',</div><div class="line">                        'value': 'beijing'</div><div class="line">                    &#125;, &#123;'name': '6103', 'value': 'haerbin'&#125;]</div><div class="line">                &#125;;</div><div class="line">                //简单读取</div><div class="line">                alert(jsonObj.root[0].name);</div><div class="line"></div><div class="line">                //循环读取</div><div class="line">                $.each(jsonObj.root, function(index,item)&#123;</div><div class="line">                    $("#jsonData").append(</div><div class="line">                            "<span class="tag">&lt;<span class="name">p</span>&gt;</span>" +index+ " : " +item.name+ "<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span>"</div><div class="line">                    )</div><div class="line"></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"myBtn1"</span>&gt;</span>string=&gt;JSON<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"myBtn2"</span>&gt;</span>JSON=&gt;string<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"myBtn3"</span>&gt;</span>JSON数据解析<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"jsonData"</span>&gt;</span>数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上记录一些web端关于JSON相关的东西。有些通过学习JavaScript与JQuery文档记录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ajax中默认是不允许跨域访问的，意思就是Ajax不能请求其他服务器的数据。用jsonp（json with padding，翻译是填充式json，参数式json）可以间接解决跨域问题。因为WEB端也经常需要处理JSON数据，记录一下WEB端接收JSON后的一些处理方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JQuery" scheme="http://blog.xigulu.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>点赞功能：从数据库设计到Web端实现分析</title>
    <link href="http://blog.xigulu.com/2016/04/06/PHP_dian_like_design/"/>
    <id>http://blog.xigulu.com/2016/04/06/PHP_dian_like_design/</id>
    <published>2016-04-05T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>点赞功能需求：用户能点赞，能取消赞，同时能查看赞了该条状态的所有人，可能还需要提醒发该条状态的人谁谁谁赞了你。<br>web端实现：显示点赞数，当有用户赞了该状态，则点赞数+1等。<br>本文从点赞功能的数据库设计说起，一步步到各个功能的基本实现方法。<br><a id="more"></a></p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>首先是2张表，t_user表与t_tatus表，分别表示用户表与状态表。Ps：这个点赞功能是需要登录的。（如果是不需要登录就能点赞，最好还需要多个字段或新表来记录用户IP，防止重复点赞）<br>那么关键是点赞功能怎么在数据库中表现出来。</p>
<p>刚开始我觉得直接在t_tatus表中加一个like字段，当有用户点了赞，直接拼个user_id组成的字符串，用逗号隔开， 形如1,2,3,4写入即可。麻烦的是每次写入新的id都要重新拼一次字符串，取消赞也要操作一次字符串，每次取得赞的所有人也要处理字符串，每次计算赞的人数也要拆一次字符串。<br>当是这种写法也不是没好处，节省空间，不用新表，数据库开销小。无非计算字符串来来回回比较浪费时间。<br>为了以后查询好处理一点，我的实现还是新建了一张t_like表（有新方案的小伙伴可以评论留言讨论），结构如下。</p>
<p>表t_user结构：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</div><div class="line"><span class="string">`userID`</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line"><span class="string">`username`</span>  <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</div><div class="line"><span class="string">`nickname`</span>  <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">`pwd`</span>  <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">`phoneno`</span>  <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> ,  </div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`userID`</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>表t_tatus结构：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_tatus`</span> (</div><div class="line"><span class="string">`statusID`</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line"><span class="string">`userID`</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">`statusContent`</span>  <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> ,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`statusID`</span>)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>表t_like结构：（双主键）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_like`</span> (</div><div class="line"><span class="string">`statusID`</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">`userID`</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">`createTime`</span>  <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> ,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`statusID`</span>,<span class="string">`userID`</span>)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器端主要做的就是点赞时在t_like表中插入一条数据，取消赞时找到t_like表中的对应数据删除，很easy。PS：可能还需要统计赞的个数并返回，sql语句count()一下。<br>文件名like.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span>(<span class="string">'common.php'</span>);</div><div class="line"></div><div class="line"><span class="comment">//http:localhost/like.php?userID=1&amp;statusID=1&amp;getMethod=web&amp;do=auto</span></div><div class="line"></div><div class="line">$userID = $_GET[<span class="string">'userID'</span>];</div><div class="line">$statusID = $_GET[<span class="string">'statusID'</span>];</div><div class="line">$getMethod = $_GET[<span class="string">'getMethod'</span>];  <span class="comment">//请求方式, 如果是web, 则返回地址</span></div><div class="line">$do = $_GET[<span class="string">'do'</span>];  <span class="comment">//like 或者 unlike 或者 auto(自动判断)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($userID) || !<span class="keyword">isset</span>($statusID)) &#123;</div><div class="line">    <span class="keyword">return</span> Response::show(<span class="number">401</span>, <span class="string">'参数不合法'</span>);</div><div class="line">    eixt();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//登录检测</span></div><div class="line"><span class="comment">//xxxx</span></div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $connect = Db::getInstance()-&gt;connect();</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">    <span class="keyword">return</span> Response::show(<span class="number">403</span>, <span class="string">'数据库连接失败'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_like</span><span class="params">($connect,$getMethod,$statusID,$userID)</span></span>&#123;</div><div class="line">    $nowTime = date(<span class="string">'Y-m-d H:i:s'</span>, time());</div><div class="line"></div><div class="line">    $sql = <span class="string">"INSERT INTO t_like(statusID,userID,createTime) VALUES ($statusID,$userID,'$nowTime')"</span>;</div><div class="line">    $result = mysql_query($sql, $connect);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($result) &#123;</div><div class="line">        <span class="keyword">if</span> ($getMethod == <span class="string">"web"</span>) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Y"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> Response::show(<span class="number">402</span>, <span class="string">'点赞失败'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_unlike</span><span class="params">($connect,$getMethod,$statusID,$userID)</span></span>&#123;</div><div class="line"></div><div class="line">    $sql = <span class="string">"delete from t_like where statusID=$statusID and userID=$userID"</span>;</div><div class="line">    $result = mysql_query($sql, $connect);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($result) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ($getMethod == <span class="string">"web"</span>) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"N"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> Response::show(<span class="number">403</span>, <span class="string">'取消赞失败'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($do == <span class="string">"auto"</span>)&#123;</div><div class="line">    <span class="comment">//1.判断是否赞过.赞过-&gt;取消赞; 未赞过, 点赞.</span></div><div class="line">    $sql = <span class="string">"SELECT createTime FROM t_like WHERE statusID=$statusID and userID=$userID"</span>;</div><div class="line"></div><div class="line">    $query = mysql_query($sql,$connect);</div><div class="line">    <span class="keyword">if</span> ($query) &#123;</div><div class="line">        <span class="keyword">if</span> ($rs = mysql_fetch_array($query)) &#123;</div><div class="line">            <span class="comment">//有值, 表示已经赞</span></div><div class="line">            do_unlike($connect,$getMethod,$statusID,$userID);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//未赞</span></div><div class="line">            do_like($connect,$getMethod,$statusID,$userID);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> Response::show(<span class="number">401</span>, <span class="string">'查询失败'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line"><span class="keyword">if</span> ($do == <span class="string">"like"</span>) &#123;</div><div class="line"></div><div class="line">    do_like($connect,$getMethod);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($do == <span class="string">"unlike"</span>) &#123;</div><div class="line"></div><div class="line">    do_unlike($connect,$getMethod,$statusID,$userID);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> Response::show(<span class="number">401</span>, <span class="string">'参数不合法'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>common.php文件中包含了一些封装的返回信息，数据库连接封装。</p>
<h2 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h2><h3 id="Ajax实现web端点赞"><a href="#Ajax实现web端点赞" class="headerlink" title="Ajax实现web端点赞"></a>Ajax实现web端点赞</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">"zanName"</span> <span class="attr">onclick</span>=<span class="string">"demo()"</span>&gt;</span>赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    ajax点击更新赞的数目</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//1.创建XMLHttpRequest 对象</span></div><div class="line">        <span class="keyword">var</span> xmlhttp;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">            xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">            xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//2.发送get请求</span></div><div class="line">        xmlhttp.open(<span class="string">"GET"</span>, <span class="string">"like.php?userID=1&amp;statusID=1&amp;getMethod=web&amp;do=auto"</span>, <span class="literal">true</span>);</div><div class="line">        xmlhttp.send();</div><div class="line"></div><div class="line">        <span class="comment">//3.获取响应并显示</span></div><div class="line">        <span class="comment">//如果来自服务器的响应并非 XML，请使用 responseText 属性。</span></div><div class="line">        <span class="comment">//如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性.</span></div><div class="line">        <span class="comment">//document.getElementById("myDiv").innerHTML = xmlhttp.responseText;</span></div><div class="line">        xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> isLike = xmlhttp.responseText;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(isLike == <span class="string">'Y'</span>)&#123;</div><div class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"zanName"</span>).innerHTML = <span class="string">"已赞"</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isLike == <span class="string">'N'</span>)&#123;</div><div class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"zanName"</span>).innerHTML = <span class="string">"赞"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>通过获取服务器返回的Y，或者N来自动判断是否点过赞。点过赞则显示已赞，再次点击则取消赞。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>可以用客户端Cookie记录用户是否点赞，也可以用Session判断用户是否登录，并记录用户是否点赞。然后再对数据库进行操作。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><h3 id="潜在问题"><a href="#潜在问题" class="headerlink" title="潜在问题"></a>潜在问题</h3><p>因为实际需求中点赞数量可能很庞大，多用户+多status时更是惊人。使得这张t_like表可能变得巨大，且没必要，那么如何解决？</p>
<h3 id="我的优化思路"><a href="#我的优化思路" class="headerlink" title="我的优化思路"></a>我的优化思路</h3><p>定期清理t_like表中的数据，如用户删除了status的；时间过去久远的status可以只记录点赞的总条数，把对应的t_like中数据删除。</p>
<p>功能不尽完善，实际需求时很多细节功能要复杂很多，本文仅提供一些思路，不贴完整代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点赞功能需求：用户能点赞，能取消赞，同时能查看赞了该条状态的所有人，可能还需要提醒发该条状态的人谁谁谁赞了你。&lt;br&gt;web端实现：显示点赞数，当有用户赞了该状态，则点赞数+1等。&lt;br&gt;本文从点赞功能的数据库设计说起，一步步到各个功能的基本实现方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://blog.xigulu.com/tags/PHP/"/>
    
      <category term="WEB" scheme="http://blog.xigulu.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>iOS实用分类：XNCategory</title>
    <link href="http://blog.xigulu.com/2016/03/02/iOS-XNCategory/"/>
    <id>http://blog.xigulu.com/2016/03/02/iOS-XNCategory/</id>
    <published>2016-03-01T16:00:00.000Z</published>
    <updated>2016-11-25T11:23:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/xn4545945/XNCategory" target="_blank" rel="external">XNCategory</a>是一个实用分类集合框架，涵盖iOS应用开发中最常用的一些功能。目前包括对NSFoundation，UIKit，网络一些类扩展的实用功能。如NSArray、NSDictionary控制台输出中文问题，UIView坐标简化调用及圆角等，NSDate简化时间处理，NSString动态计算宽度等。后续还会继续添加更实用的分类，精简调用方法，并整理一份比较完善的文档。（长期维护更新，欢迎使用或反馈Issues <a href="https://github.com/xn4545945/XNCategory" target="_blank" rel="external">传送门XNCategory</a>）</p>
<a id="more"></a>
<h2 id="Get-Start"><a href="#Get-Start" class="headerlink" title="Get Start"></a>Get Start</h2><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用?"></a>如何使用?</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="Swift项目中使用"><a href="#Swift项目中使用" class="headerlink" title="Swift项目中使用 :"></a>Swift项目中使用 :</h3><h3 id="常用宏定义使用"><a href="#常用宏定义使用" class="headerlink" title="常用宏定义使用 :"></a>常用宏定义使用 :</h3><h3 id="使用场景1"><a href="#使用场景1" class="headerlink" title="使用场景1 :"></a>使用场景1 :</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="使用场景2"><a href="#使用场景2" class="headerlink" title="使用场景2 :"></a>使用场景2 :</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="使用场景3"><a href="#使用场景3" class="headerlink" title="使用场景3 :"></a>使用场景3 :</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/xn4545945/XNCategory&quot;&gt;XNCategory&lt;/a&gt;是一个实用分类集合框架，涵盖iOS应用开发中最常用的一些功能。目前包括对NSFoundation，UIKit，网络一些类扩展的实用功能。如NSArray、NSDictionary控制台输出中文问题，UIView坐标简化调用及圆角等，NSDate简化时间处理，NSString动态计算宽度等。后续还会继续添加更实用的分类，精简调用方法，并整理一份比较完善的文档。（长期维护更新，欢迎使用或反馈Issues &lt;a href=&quot;https://github.com/xn4545945/XNCategory&quot;&gt;传送门XNCategory&lt;/a&gt;）&lt;/p&gt;
    
    </summary>
    
    
      <category term="XNCategory" scheme="http://blog.xigulu.com/tags/XNCategory/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap布局及网站实例</title>
    <link href="http://blog.xigulu.com/2016/01/01/Bootstrap_learning_notes/"/>
    <id>http://blog.xigulu.com/2016/01/01/Bootstrap_learning_notes/</id>
    <published>2015-12-31T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bootstrap，讲道理，写很少代码就能布局一个非常漂亮的页面。关键是移动为先的理念，想想都很赞！Ps：想想苦逼的写iOS/Android界面的同学，这东西简直不能再好。本文主要写栅格系统，布局及应用，至于控件，要用的时候去官网文档看实例最好。<br><a id="more"></a></p>
<hr>
<h2 id="Bootstrap中的布局"><a href="#Bootstrap中的布局" class="headerlink" title="Bootstrap中的布局"></a>Bootstrap中的布局</h2><p>首先找到个web端的编辑工具。<a href="http://www.bootcss.com/p/layoutit/" target="_blank" rel="external">http://www.bootcss.com/p/layoutit/</a> 或者 <a href="http://www.layoutit.com/build" target="_blank" rel="external">http://www.layoutit.com/build</a> </p>
<p>还有官网的几个经典案例。<a href="http://caibaojian.com/bootstrap/getting-started.html#examples" target="_blank" rel="external">http://caibaojian.com/bootstrap/getting-started.html#examples</a></p>
<h3 id="栅格系统-网格系统"><a href="#栅格系统-网格系统" class="headerlink" title="栅格系统(网格系统)"></a>栅格系统(网格系统)</h3><p>什么是Grid System? 系统随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。<br><img src="http://ww2.sinaimg.cn/large/4b274f16jw1f2hvinugi4j20q507374t.jpg" alt=""></p>
<p>网格系统需要注意的:</p>
<ol>
<li>行必须放置在 .container class 内，以便获得适当的对齐（alignment）和内边距（padding）。</li>
<li>使用行来创建列的水平组。</li>
<li>内容应该放置在列内，且唯有列可以是行的直接子元素。</li>
</ol>
<p>下面一张图列出了在什么样的屏幕下用什么前缀的gird。<br><img src="http://ww4.sinaimg.cn/large/4b274f16jw1f2hvh0myisj20qe0f840w.jpg" alt=""></p>
<h4 id="demo-1：水平排列。"><a href="#demo-1：水平排列。" class="headerlink" title="demo 1：水平排列。"></a>demo 1：水平排列。</h4><p>在大屏幕上12分为1列4个， 在小屏上2列各2个。（可以通过调整浏览器宽口大小来观察变化）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>333333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>444444<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="demo2：偏移列。"><a href="#demo2：偏移列。" class="headerlink" title="demo2：偏移列。"></a>demo2：偏移列。</h4><p>通俗的意思就是隔开几列。（调整浏览器宽口大小，会发现窗口很小时是靠最左边的。当拖动到一定大小后，会变得靠右一点）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-offset-3"</span>&gt;</span>1111111111111111111111111111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="demo3：嵌套列。"><a href="#demo3：嵌套列。" class="headerlink" title="demo3：嵌套列。"></a>demo3：嵌套列。</h4><p>就是列中嵌套其他列。为了在内容中嵌套默认的网格，请添加一个新的.row。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>333333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="demo4：列排序。"><a href="#demo4：列排序。" class="headerlink" title="demo4：列排序。"></a>demo4：列排序。</h4><p>意思就是你编写的顺序并不代表你显示的顺序。你可以push右推， pull左边拉过来。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>排序前<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>我在左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span>我在右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>排序后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-push-8"</span>&gt;</span>我在左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 col-md-pull-4"</span>&gt;</span>我在右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="固定布局"><a href="#固定布局" class="headerlink" title="固定布局"></a>固定布局</h3><p>就是不缩放。如果您想要创建基于固定像素数的网页。直接用container。(也可以变为响应式)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>流布局是一种适应屏幕的做法。即不固定块的宽度，而是采用百分比作为单位来确定每一块的宽度。这种布局非常适应各种不同大小的屏幕。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"span2"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--Sidebar content--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"span10"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--Body content--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="基本网站布局实例"><a href="#基本网站布局实例" class="headerlink" title="基本网站布局实例"></a>基本网站布局实例</h2><p>在Bootstrap文档中有一个名为carousel的example，算是里面最复杂的一个。以下列一些构建该网页的基本框架，注意点供大家参考，有兴趣的可以自己写写。<a href="http://caibaojian.com/bootstrap/examples/carousel.html" target="_blank" rel="external">http://caibaojian.com/bootstrap/examples/carousel.html</a><br><img src="http://ww2.sinaimg.cn/large/4b274f16jw1f2hvhrhwh9j20ym0iimz7.jpg" alt=""></p>
<h3 id="主要结构分析"><a href="#主要结构分析" class="headerlink" title="主要结构分析"></a>主要结构分析</h3><ol>
<li>最上部navbar</li>
<li>滑动控件(官网上有直接demo, 这个代码固定)</li>
<li>主体部分: 头部3个等分的一行，及下部3个交错的列，最后是footer</li>
</ol>
<p>以下参考了源代码，主要是写页面结构。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--包裹navbar--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myNavbar-wrapper"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--这个container能使nav不全屏--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse navbar-static-top"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!--标题--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Project name<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!--列表--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--------------固定的滑动展示模块-----------------&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCarousel"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Indicators --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span> <span class="attr">role</span>=<span class="string">"listbox"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"first-slide"</span> <span class="attr">src</span>=<span class="string">"images/slide-01.jpg"</span> <span class="attr">alt</span>=<span class="string">"First slide"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example headline.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>。。。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Sign up today<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"second-slide"</span> <span class="attr">src</span>=<span class="string">"images/slide-02.jpg"</span> <span class="attr">alt</span>=<span class="string">"Second slide"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Another example headline.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>。。。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Learn more<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--主体部分布局, 包括底部--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"marketing container"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-4"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-circle"</span> <span class="attr">src</span>=<span class="string">"images/blank.png"</span> <span class="attr">width</span>=<span class="string">"140"</span> <span class="attr">height</span>=<span class="string">"140"</span> <span class="attr">alt</span>=<span class="string">"placeholder"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>blog.xigulu.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>xn4545945 xn4545945<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>查看更多...<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-4"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-circle"</span> <span class="attr">src</span>=<span class="string">"images/blank.png"</span> <span class="attr">width</span>=<span class="string">"140"</span> <span class="attr">height</span>=<span class="string">"140"</span> <span class="attr">alt</span>=<span class="string">"placeholder"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>blog.xigulu.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>xn4545945 xn4545945 xn4545945<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>查看更多...<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-4"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-circle"</span> <span class="attr">src</span>=<span class="string">"images/blank.png"</span> <span class="attr">width</span>=<span class="string">"140"</span> <span class="attr">height</span>=<span class="string">"140"</span> <span class="attr">alt</span>=<span class="string">"placeholder"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>blog.xigulu.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>xn4545945 xn4545945 xn4545945 xn4545945<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>查看更多...<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--分割线--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"featurette-divider"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row featurette"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-7 featurette-heading"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这个Chrome浏览器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>  <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>这个Chrome浏览器这个Chrome浏览器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/browser-icon-chrome.png"</span> <span class="attr">alt</span>=<span class="string">"chrome!!"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--分割线--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"featurette-divider"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row featurette"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/browser-icon-firefox.png"</span> <span class="attr">alt</span>=<span class="string">"Firefox"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-7 featurette-heading"</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是火狐浏览器!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>  <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>这是火狐浏览器!这是火狐浏览器!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--分割线--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"featurette-divider"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row featurette"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-7 featurette-heading"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是Safari浏览器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>这是Safari浏览器这是Safari浏览器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/browser-icon-safari.png"</span> <span class="attr">alt</span>=<span class="string">"Safari"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--底部--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"featurette-divider"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;copy; 2016 xn545945.  &amp;middot;  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>隐私<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  &amp;middot;  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>基本结构就是这样。当然还有部分CSS代码。只设定了几个主要的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></div><div class="line">        body&#123;</div><div class="line">            padding-bottom: 40px;</div><div class="line">            color: #5a5a5a;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /*navbar下移*/</div><div class="line">        .myNavbar-wrapper &#123;</div><div class="line">            position: absolute;</div><div class="line">            top: 0;</div><div class="line">            left: 0;</div><div class="line">            right: 0;</div><div class="line">            z-index: 10;</div><div class="line">            margin-top: 20px;</div><div class="line">            margin-bottom: -90px; /* Negative margin to pull up carousel. 90px is roughly margins and height of navbar. */</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* marketing------------------------- */</div><div class="line">        .marketing .col-lg-4 &#123;</div><div class="line">            margin-bottom: 20px;</div><div class="line">            text-align: center;</div><div class="line">        &#125;</div><div class="line">        .marketing h2 &#123;</div><div class="line">            font-weight: normal;</div><div class="line">        &#125;</div><div class="line">        .marketing .col-lg-4 p &#123;</div><div class="line">            margin-right: 10px;</div><div class="line">            margin-left: 10px;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* Featurettes------------------------- */</div><div class="line"></div><div class="line">        .featurette-divider &#123;</div><div class="line">            margin: 80px 0; /* Space out the Bootstrap <span class="tag">&lt;<span class="name">hr</span>&gt;</span> more */</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* Thin out the marketing headings */</div><div class="line">        .featurette-heading &#123;</div><div class="line">            font-weight: 300;</div><div class="line">            line-height: 1;</div><div class="line">            letter-spacing: -1px;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="引入CDN"><a href="#引入CDN" class="headerlink" title="引入CDN"></a>引入CDN</h3><p>注意： 当用本地文件方式引入Bootstrap时， 左右图片滑动模块是不能显示完全的。因此用引入CDN。</p>
<pre><code class="html"><span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span>
<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span>

<span class="comment">&lt;!-- 可选的Bootstrap主题文件（一般不使用） --&gt;</span>
<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap-theme.min.css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>

<span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span>
<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>

<span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span>
<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/bootstrap/3.3.0/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>
</code></pre>
<hr>
<h2 id="结语-代码"><a href="#结语-代码" class="headerlink" title="结语 + 代码"></a>结语 + 代码</h2><p>Bootstrap好东西啊！ 附上前面实例的代码。<a href="http://7xlwuv.com1.z0.glb.clouddn.com/16-4-2/35929570-Bootstrap_learn.zip" target="_blank" rel="external">点我下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bootstrap，讲道理，写很少代码就能布局一个非常漂亮的页面。关键是移动为先的理念，想想都很赞！Ps：想想苦逼的写iOS/Android界面的同学，这东西简直不能再好。本文主要写栅格系统，布局及应用，至于控件，要用的时候去官网文档看实例最好。&lt;br&gt;
    
    </summary>
    
    
      <category term="Bootstrap" scheme="http://blog.xigulu.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa在实际项目中的一些应用</title>
    <link href="http://blog.xigulu.com/2015/09/10/RAC_skills_one/"/>
    <id>http://blog.xigulu.com/2015/09/10/RAC_skills_one/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">RAC</a>结合了函数式编程与响应式编程(FRP)。将代码写成一系列嵌套的方法中，使代码高度聚合， 方便管理。 本文主要记录自己在实际项目中的一些应用，遇到的问题等。</p>
<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;RAC&lt;/a&gt;结合了函数式编程与响应式编程(FRP)。将代码写成一系列嵌套的方法中，使代码高度聚合， 方便管理。 本文主要记录自己在实际项目中的一些应用，遇到的问题等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://blog.xigulu.com/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>iOS中输入文字时自动上/下移TableView完美方法</title>
    <link href="http://blog.xigulu.com/2015/08/29/iOSPractice_tableView_move/"/>
    <id>http://blog.xigulu.com/2015/08/29/iOSPractice_tableView_move/</id>
    <published>2015-08-28T16:00:00.000Z</published>
    <updated>2016-08-16T17:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们需要处理键盘事件, 如登录或者输入信息的页面, 会让tableView向上移动, 以至于不让键盘挡住输入框。 这样做能提升用户体验。 同理ScrolView, TextField/TextView等, 本文主要记录几种解决办法。</p>
<a id="more"></a>
<hr>
<h2 id="方法一-监听TextField-TextView的代理事件"><a href="#方法一-监听TextField-TextView的代理事件" class="headerlink" title="方法一: 监听TextField/TextView的代理事件"></a>方法一: 监听TextField/TextView的代理事件</h2><p>主要代码如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - textField delegate</span></div><div class="line">- (<span class="keyword">void</span>)textFieldDidBeginEditing:(<span class="built_in">UITextField</span> *)textField &#123;</div><div class="line">    [<span class="keyword">self</span> animateTextField:textField up:<span class="literal">YES</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)textFieldDidEndEditing:(<span class="built_in">UITextField</span> *)textField &#123;</div><div class="line">    [<span class="keyword">self</span> animateTextField:textField up:<span class="literal">NO</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//移位</span></div><div class="line">- (<span class="keyword">void</span>) animateTextField:(<span class="built_in">UITextField</span>*)textField up: (<span class="built_in">BOOL</span>) up&#123;</div><div class="line">    <span class="comment">//假设y 抽上移100.</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> movementDistance = <span class="number">100</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span> movementDuration = <span class="number">0.3</span>f;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> movement = (up ? -movementDistance : movementDistance);</div><div class="line">    </div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:movementDuration animations:^&#123;</div><div class="line">        <span class="keyword">self</span>.tableViewMain.frame = <span class="built_in">CGRectOffset</span>(<span class="keyword">self</span>.view.frame, <span class="number">0</span>, movement);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法一采用整体上移/回移tableView的frame方法.</p>
<ul>
<li><strong>优点</strong>: 对于非采用tableView(ScrollView)布局的页面, 优势非常明显, 简单方便. 如: 登录时, 只需要挪动一固定位置, 达到输入框置顶的效果.</li>
<li><strong>缺点</strong>: 很明显, 没有自动获取键盘高度, 无法达到移动键盘高度的大小(键盘高度非固定). </li>
</ul>
<hr>
<h2 id="方法二-监听键盘的弹出与收回通知"><a href="#方法二-监听键盘的弹出与收回通知" class="headerlink" title="方法二: 监听键盘的弹出与收回通知"></a>方法二: 监听键盘的弹出与收回通知</h2><p>方法二采用监听键盘事件, 当键盘弹出时上移tableView底部到键盘顶部, 当键盘收起时将tableView移回.</p>
<ul>
<li><strong>特点</strong>: 灵活性较强.</li>
</ul>
<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><strong><em>看实际需求, 如果设计师给的图是普通的登录注册, 用第一种方式, 移动固定大小就搞定; 如果像聊天界面那种需要看到最下面的内容时, 坚决选第二种.</em></strong></p>
<p><a href="">点击下载本文对应代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们需要处理键盘事件, 如登录或者输入信息的页面, 会让tableView向上移动, 以至于不让键盘挡住输入框。 这样做能提升用户体验。 同理ScrolView, TextField/TextView等, 本文主要记录几种解决办法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.xigulu.com/tags/iOS/"/>
    
  </entry>
  
</feed>
